!function(t){var r={};function e(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=r,e.d=function(t,r,n){e.o(t,r)||Object.defineProperty(t,r,{enumerable:!0,get:n})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,r){if(1&r&&(t=e(t)),8&r)return t;if(4&r&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(e.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&r&&"string"!=typeof t)for(var o in t)e.d(n,o,function(r){return t[r]}.bind(null,o));return n},e.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(r,"a",r),r},e.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},e.p="",e(e.s=97)}([function(t,r,e){(function(r){var e="object",n=function(t){return t&&t.Math==Math&&t};t.exports=n(typeof globalThis==e&&globalThis)||n(typeof window==e&&window)||n(typeof self==e&&self)||n(typeof r==e&&r)||Function("return this")()}).call(this,e(62))},function(t,r,e){var n=e(0),o=e(12),i=e(28),u=e(46),a=n.Symbol,c=o("wks");t.exports=function(t){return c[t]||(c[t]=u&&a[t]||(u?a:i)("Symbol."+t))}},function(t,r){var e={}.hasOwnProperty;t.exports=function(t,r){return e.call(t,r)}},function(t,r){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,r,e){var n=e(3);t.exports=function(t){if(!n(t))throw TypeError(String(t)+" is not an object");return t}},function(t,r,e){var n=e(6),o=e(8),i=e(18);t.exports=n?function(t,r,e){return o.f(t,r,i(1,e))}:function(t,r,e){return t[r]=e,t}},function(t,r,e){var n=e(7);t.exports=!n((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(t,r){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,r,e){var n=e(6),o=e(40),i=e(4),u=e(25),a=Object.defineProperty;r.f=n?a:function(t,r,e){if(i(t),r=u(r,!0),i(e),o)try{return a(t,r,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported");return"value"in e&&(t[r]=e.value),t}},function(t,r,e){var n=e(39),o=e(24);t.exports=function(t){return n(o(t))}},function(t,r){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,r,e){var n=e(0),o=e(12),i=e(5),u=e(2),a=e(27),c=e(41),s=e(14),f=s.get,l=s.enforce,p=String(c).split("toString");o("inspectSource",(function(t){return c.call(t)})),(t.exports=function(t,r,e,o){var c=!!o&&!!o.unsafe,s=!!o&&!!o.enumerable,f=!!o&&!!o.noTargetGet;"function"==typeof e&&("string"!=typeof r||u(e,"name")||i(e,"name",r),l(e).source=p.join("string"==typeof r?r:"")),t!==n?(c?!f&&t[r]&&(s=!0):delete t[r],s?t[r]=e:i(t,r,e)):s?t[r]=e:a(r,e)})(Function.prototype,"toString",(function(){return"function"==typeof this&&f(this).source||c.call(this)}))},function(t,r,e){var n=e(0),o=e(27),i=e(13),u=n["__core-js_shared__"]||o("__core-js_shared__",{});(t.exports=function(t,r){return u[t]||(u[t]=void 0!==r?r:{})})("versions",[]).push({version:"3.2.1",mode:i?"pure":"global",copyright:"Â© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,r){t.exports=!1},function(t,r,e){var n,o,i,u=e(63),a=e(0),c=e(3),s=e(5),f=e(2),l=e(19),p=e(20),h=a.WeakMap;if(u){var y=new h,d=y.get,v=y.has,b=y.set;n=function(t,r){return b.call(y,t,r),r},o=function(t){return d.call(y,t)||{}},i=function(t){return v.call(y,t)}}else{var m=l("state");p[m]=!0,n=function(t,r){return s(t,m,r),r},o=function(t){return f(t,m)?t[m]:{}},i=function(t){return f(t,m)}}t.exports={set:n,get:o,has:i,enforce:function(t){return i(t)?o(t):n(t,{})},getterFor:function(t){return function(r){var e;if(!c(r)||(e=o(r)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return e}}}},function(t,r){t.exports={}},function(t,r,e){var n=e(0),o=e(17).f,i=e(5),u=e(11),a=e(27),c=e(42),s=e(45);t.exports=function(t,r){var e,f,l,p,h,y=t.target,d=t.global,v=t.stat;if(e=d?n:v?n[y]||a(y,{}):(n[y]||{}).prototype)for(f in r){if(p=r[f],l=t.noTargetGet?(h=o(e,f))&&h.value:e[f],!s(d?f:y+(v?".":"#")+f,t.forced)&&void 0!==l){if(typeof p==typeof l)continue;c(p,l)}(t.sham||l&&l.sham)&&i(p,"sham",!0),u(e,f,p,t)}}},function(t,r,e){var n=e(6),o=e(38),i=e(18),u=e(9),a=e(25),c=e(2),s=e(40),f=Object.getOwnPropertyDescriptor;r.f=n?f:function(t,r){if(t=u(t),r=a(r,!0),s)try{return f(t,r)}catch(t){}if(c(t,r))return i(!o.f.call(t,r),t[r])}},function(t,r){t.exports=function(t,r){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:r}}},function(t,r,e){var n=e(12),o=e(28),i=n("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},function(t,r){t.exports={}},function(t,r,e){var n=e(29),o=e(0),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,r){return arguments.length<2?i(n[t])||i(o[t]):n[t]&&n[t][r]||o[t]&&o[t][r]}},function(t,r,e){var n=e(8).f,o=e(2),i=e(1)("toStringTag");t.exports=function(t,r,e){t&&!o(t=e?t:t.prototype,i)&&n(t,i,{configurable:!0,value:r})}},function(t,r){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,r){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,r,e){var n=e(3);t.exports=function(t,r){if(!n(t))return t;var e,o;if(r&&"function"==typeof(e=t.toString)&&!n(o=e.call(t)))return o;if("function"==typeof(e=t.valueOf)&&!n(o=e.call(t)))return o;if(!r&&"function"==typeof(e=t.toString)&&!n(o=e.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,r,e){var n=e(0),o=e(3),i=n.document,u=o(i)&&o(i.createElement);t.exports=function(t){return u?i.createElement(t):{}}},function(t,r,e){var n=e(0),o=e(5);t.exports=function(t,r){try{o(n,t,r)}catch(e){n[t]=r}return r}},function(t,r){var e=0,n=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++e+n).toString(36)}},function(t,r,e){t.exports=e(0)},function(t,r,e){var n=e(43),o=e(33).concat("length","prototype");r.f=Object.getOwnPropertyNames||function(t){return n(t,o)}},function(t,r,e){var n=e(32),o=Math.min;t.exports=function(t){return t>0?o(n(t),9007199254740991):0}},function(t,r){var e=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:e)(t)}},function(t,r){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,r,e){var n=e(24);t.exports=function(t){return Object(n(t))}},function(t,r,e){var n=e(4),o=e(67),i=e(33),u=e(20),a=e(49),c=e(26),s=e(19)("IE_PROTO"),f=function(){},l=function(){var t,r=c("iframe"),e=i.length;for(r.style.display="none",a.appendChild(r),r.src=String("javascript:"),(t=r.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),l=t.F;e--;)delete l.prototype[i[e]];return l()};t.exports=Object.create||function(t,r){var e;return null!==t?(f.prototype=n(t),e=new f,f.prototype=null,e[s]=t):e=l(),void 0===r?e:o(e,r)},u[s]=!0},function(t,r,e){var n=e(23);t.exports=function(t,r,e){if(n(t),void 0===r)return t;switch(e){case 0:return function(){return t.call(r)};case 1:return function(e){return t.call(r,e)};case 2:return function(e,n){return t.call(r,e,n)};case 3:return function(e,n,o){return t.call(r,e,n,o)}}return function(){return t.apply(r,arguments)}}},function(t,r,e){"use strict";var n=e(16),o=e(0),i=e(13),u=e(6),a=e(46),c=e(7),s=e(2),f=e(47),l=e(3),p=e(4),h=e(34),y=e(9),d=e(25),v=e(18),b=e(35),m=e(48),g=e(30),x=e(68),w=e(44),S=e(17),O=e(8),j=e(38),T=e(5),P=e(11),A=e(12),E=e(19),_=e(20),L=e(28),I=e(1),B=e(50),k=e(51),M=e(22),F=e(14),R=e(69).forEach,D=E("hidden"),C=I("toPrimitive"),U=F.set,N=F.getterFor("Symbol"),G=Object.prototype,q=o.Symbol,H=o.JSON,V=H&&H.stringify,z=S.f,W=O.f,J=x.f,K=j.f,Y=A("symbols"),$=A("op-symbols"),X=A("string-to-symbol-registry"),Q=A("symbol-to-string-registry"),Z=A("wks"),tt=o.QObject,rt=!tt||!tt.prototype||!tt.prototype.findChild,et=u&&c((function(){return 7!=b(W({},"a",{get:function(){return W(this,"a",{value:7}).a}})).a}))?function(t,r,e){var n=z(G,r);n&&delete G[r],W(t,r,e),n&&t!==G&&W(G,r,n)}:W,nt=function(t,r){var e=Y[t]=b(q.prototype);return U(e,{type:"Symbol",tag:t,description:r}),u||(e.description=r),e},ot=a&&"symbol"==typeof q.iterator?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof q},it=function(t,r,e){t===G&&it($,r,e),p(t);var n=d(r,!0);return p(e),s(Y,n)?(e.enumerable?(s(t,D)&&t[D][n]&&(t[D][n]=!1),e=b(e,{enumerable:v(0,!1)})):(s(t,D)||W(t,D,v(1,{})),t[D][n]=!0),et(t,n,e)):W(t,n,e)},ut=function(t,r){p(t);var e=y(r),n=m(e).concat(ft(e));return R(n,(function(r){u&&!at.call(e,r)||it(t,r,e[r])})),t},at=function(t){var r=d(t,!0),e=K.call(this,r);return!(this===G&&s(Y,r)&&!s($,r))&&(!(e||!s(this,r)||!s(Y,r)||s(this,D)&&this[D][r])||e)},ct=function(t,r){var e=y(t),n=d(r,!0);if(e!==G||!s(Y,n)||s($,n)){var o=z(e,n);return!o||!s(Y,n)||s(e,D)&&e[D][n]||(o.enumerable=!0),o}},st=function(t){var r=J(y(t)),e=[];return R(r,(function(t){s(Y,t)||s(_,t)||e.push(t)})),e},ft=function(t){var r=t===G,e=J(r?$:y(t)),n=[];return R(e,(function(t){!s(Y,t)||r&&!s(G,t)||n.push(Y[t])})),n};a||(P((q=function(){if(this instanceof q)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,r=L(t),e=function(t){this===G&&e.call($,t),s(this,D)&&s(this[D],r)&&(this[D][r]=!1),et(this,r,v(1,t))};return u&&rt&&et(G,r,{configurable:!0,set:e}),nt(r,t)}).prototype,"toString",(function(){return N(this).tag})),j.f=at,O.f=it,S.f=ct,g.f=x.f=st,w.f=ft,u&&(W(q.prototype,"description",{configurable:!0,get:function(){return N(this).description}}),i||P(G,"propertyIsEnumerable",at,{unsafe:!0})),B.f=function(t){return nt(I(t),t)}),n({global:!0,wrap:!0,forced:!a,sham:!a},{Symbol:q}),R(m(Z),(function(t){k(t)})),n({target:"Symbol",stat:!0,forced:!a},{for:function(t){var r=String(t);if(s(X,r))return X[r];var e=q(r);return X[r]=e,Q[e]=r,e},keyFor:function(t){if(!ot(t))throw TypeError(t+" is not a symbol");if(s(Q,t))return Q[t]},useSetter:function(){rt=!0},useSimple:function(){rt=!1}}),n({target:"Object",stat:!0,forced:!a,sham:!u},{create:function(t,r){return void 0===r?b(t):ut(b(t),r)},defineProperty:it,defineProperties:ut,getOwnPropertyDescriptor:ct}),n({target:"Object",stat:!0,forced:!a},{getOwnPropertyNames:st,getOwnPropertySymbols:ft}),n({target:"Object",stat:!0,forced:c((function(){w.f(1)}))},{getOwnPropertySymbols:function(t){return w.f(h(t))}}),H&&n({target:"JSON",stat:!0,forced:!a||c((function(){var t=q();return"[null]"!=V([t])||"{}"!=V({a:t})||"{}"!=V(Object(t))}))},{stringify:function(t){for(var r,e,n=[t],o=1;arguments.length>o;)n.push(arguments[o++]);if(e=r=n[1],(l(r)||void 0!==t)&&!ot(t))return f(r)||(r=function(t,r){if("function"==typeof e&&(r=e.call(this,t,r)),!ot(r))return r}),n[1]=r,V.apply(H,n)}}),q.prototype[C]||T(q.prototype,C,q.prototype.valueOf),M(q,"Symbol"),_[D]=!0},function(t,r,e){"use strict";var n={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!n.call({1:2},1);r.f=i?function(t){var r=o(this,t);return!!r&&r.enumerable}:n},function(t,r,e){var n=e(7),o=e(10),i="".split;t.exports=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},function(t,r,e){var n=e(6),o=e(7),i=e(26);t.exports=!n&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(t,r,e){var n=e(12);t.exports=n("native-function-to-string",Function.toString)},function(t,r,e){var n=e(2),o=e(64),i=e(17),u=e(8);t.exports=function(t,r){for(var e=o(r),a=u.f,c=i.f,s=0;s<e.length;s++){var f=e[s];n(t,f)||a(t,f,c(r,f))}}},function(t,r,e){var n=e(2),o=e(9),i=e(65).indexOf,u=e(20);t.exports=function(t,r){var e,a=o(t),c=0,s=[];for(e in a)!n(u,e)&&n(a,e)&&s.push(e);for(;r.length>c;)n(a,e=r[c++])&&(~i(s,e)||s.push(e));return s}},function(t,r){r.f=Object.getOwnPropertySymbols},function(t,r,e){var n=e(7),o=/#|\.prototype\./,i=function(t,r){var e=a[u(t)];return e==s||e!=c&&("function"==typeof r?n(r):!!r)},u=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},a=i.data={},c=i.NATIVE="N",s=i.POLYFILL="P";t.exports=i},function(t,r,e){var n=e(7);t.exports=!!Object.getOwnPropertySymbols&&!n((function(){return!String(Symbol())}))},function(t,r,e){var n=e(10);t.exports=Array.isArray||function(t){return"Array"==n(t)}},function(t,r,e){var n=e(43),o=e(33);t.exports=Object.keys||function(t){return n(t,o)}},function(t,r,e){var n=e(21);t.exports=n("document","documentElement")},function(t,r,e){r.f=e(1)},function(t,r,e){var n=e(29),o=e(2),i=e(50),u=e(8).f;t.exports=function(t){var r=n.Symbol||(n.Symbol={});o(r,t)||u(r,t,{value:i.f(t)})}},function(t,r,e){"use strict";var n=e(16),o=e(6),i=e(0),u=e(2),a=e(3),c=e(8).f,s=e(42),f=i.Symbol;if(o&&"function"==typeof f&&(!("description"in f.prototype)||void 0!==f().description)){var l={},p=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),r=this instanceof p?new f(t):void 0===t?f():f(t);return""===t&&(l[r]=!0),r};s(p,f);var h=p.prototype=f.prototype;h.constructor=p;var y=h.toString,d="Symbol(test)"==String(f("test")),v=/^Symbol\((.*)\)[^)]+$/;c(h,"description",{configurable:!0,get:function(){var t=a(this)?this.valueOf():this,r=y.call(t);if(u(l,t))return"";var e=d?r.slice(7,-1):r.replace(v,"$1");return""===e?void 0:e}}),n({global:!0,forced:!0},{Symbol:p})}},function(t,r,e){var n=e(11),o=e(71),i=Object.prototype;o!==i.toString&&n(i,"toString",o,{unsafe:!0})},function(t,r,e){var n=e(10),o=e(1)("toStringTag"),i="Arguments"==n(function(){return arguments}());t.exports=function(t){var r,e,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,r){try{return t[r]}catch(t){}}(r=Object(t),o))?e:i?n(r):"Object"==(u=n(r))&&"function"==typeof r.callee?"Arguments":u}},function(t,r,e){var n,o,i,u=e(0),a=e(7),c=e(10),s=e(36),f=e(49),l=e(26),p=u.location,h=u.setImmediate,y=u.clearImmediate,d=u.process,v=u.MessageChannel,b=u.Dispatch,m=0,g={},x=function(t){if(g.hasOwnProperty(t)){var r=g[t];delete g[t],r()}},w=function(t){return function(){x(t)}},S=function(t){x(t.data)},O=function(t){u.postMessage(t+"",p.protocol+"//"+p.host)};h&&y||(h=function(t){for(var r=[],e=1;arguments.length>e;)r.push(arguments[e++]);return g[++m]=function(){("function"==typeof t?t:Function(t)).apply(void 0,r)},n(m),m},y=function(t){delete g[t]},"process"==c(d)?n=function(t){d.nextTick(w(t))}:b&&b.now?n=function(t){b.now(w(t))}:v?(i=(o=new v).port2,o.port1.onmessage=S,n=s(i.postMessage,i,1)):!u.addEventListener||"function"!=typeof postMessage||u.importScripts||a(O)?n="onreadystatechange"in l("script")?function(t){f.appendChild(l("script")).onreadystatechange=function(){f.removeChild(this),x(t)}}:function(t){setTimeout(w(t),0)}:(n=O,u.addEventListener("message",S,!1))),t.exports={set:h,clear:y}},function(t,r,e){var n=e(21);t.exports=n("navigator","userAgent")||""},function(t,r,e){"use strict";var n=e(23),o=function(t){var r,e;this.promise=new t((function(t,n){if(void 0!==r||void 0!==e)throw TypeError("Bad Promise constructor");r=t,e=n})),this.resolve=n(r),this.reject=n(e)};t.exports.f=function(t){return new o(t)}},function(t,r,e){"use strict";var n=e(9),o=e(88),i=e(15),u=e(14),a=e(59),c=u.set,s=u.getterFor("Array Iterator");t.exports=a(Array,"Array",(function(t,r){c(this,{type:"Array Iterator",target:n(t),index:0,kind:r})}),(function(){var t=s(this),r=t.target,e=t.kind,n=t.index++;return!r||n>=r.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==e?{value:n,done:!1}:"values"==e?{value:r[n],done:!1}:{value:[n,r[n]],done:!1}}),"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},function(t,r,e){"use strict";var n=e(16),o=e(89),i=e(61),u=e(91),a=e(22),c=e(5),s=e(11),f=e(1),l=e(13),p=e(15),h=e(60),y=h.IteratorPrototype,d=h.BUGGY_SAFARI_ITERATORS,v=f("iterator"),b=function(){return this};t.exports=function(t,r,e,f,h,m,g){o(e,r,f);var x,w,S,O=function(t){if(t===h&&E)return E;if(!d&&t in P)return P[t];switch(t){case"keys":case"values":case"entries":return function(){return new e(this,t)}}return function(){return new e(this)}},j=r+" Iterator",T=!1,P=t.prototype,A=P[v]||P["@@iterator"]||h&&P[h],E=!d&&A||O(h),_="Array"==r&&P.entries||A;if(_&&(x=i(_.call(new t)),y!==Object.prototype&&x.next&&(l||i(x)===y||(u?u(x,y):"function"!=typeof x[v]&&c(x,v,b)),a(x,j,!0,!0),l&&(p[j]=b))),"values"==h&&A&&"values"!==A.name&&(T=!0,E=function(){return A.call(this)}),l&&!g||P[v]===E||c(P,v,E),p[r]=E,h)if(w={values:O("values"),keys:m?E:O("keys"),entries:O("entries")},g)for(S in w)!d&&!T&&S in P||s(P,S,w[S]);else n({target:r,proto:!0,forced:d||T},w);return w}},function(t,r,e){"use strict";var n,o,i,u=e(61),a=e(5),c=e(2),s=e(1),f=e(13),l=s("iterator"),p=!1;[].keys&&("next"in(i=[].keys())?(o=u(u(i)))!==Object.prototype&&(n=o):p=!0),null==n&&(n={}),f||c(n,l)||a(n,l,(function(){return this})),t.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:p}},function(t,r,e){var n=e(2),o=e(34),i=e(19),u=e(90),a=i("IE_PROTO"),c=Object.prototype;t.exports=u?Object.getPrototypeOf:function(t){return t=o(t),n(t,a)?t[a]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?c:null}},function(t,r){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,r,e){var n=e(0),o=e(41),i=n.WeakMap;t.exports="function"==typeof i&&/native code/.test(o.call(i))},function(t,r,e){var n=e(21),o=e(30),i=e(44),u=e(4);t.exports=n("Reflect","ownKeys")||function(t){var r=o.f(u(t)),e=i.f;return e?r.concat(e(t)):r}},function(t,r,e){var n=e(9),o=e(31),i=e(66),u=function(t){return function(r,e,u){var a,c=n(r),s=o(c.length),f=i(u,s);if(t&&e!=e){for(;s>f;)if((a=c[f++])!=a)return!0}else for(;s>f;f++)if((t||f in c)&&c[f]===e)return t||f||0;return!t&&-1}};t.exports={includes:u(!0),indexOf:u(!1)}},function(t,r,e){var n=e(32),o=Math.max,i=Math.min;t.exports=function(t,r){var e=n(t);return e<0?o(e+r,0):i(e,r)}},function(t,r,e){var n=e(6),o=e(8),i=e(4),u=e(48);t.exports=n?Object.defineProperties:function(t,r){i(t);for(var e,n=u(r),a=n.length,c=0;a>c;)o.f(t,e=n[c++],r[e]);return t}},function(t,r,e){var n=e(9),o=e(30).f,i={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return u.slice()}}(t):o(n(t))}},function(t,r,e){var n=e(36),o=e(39),i=e(34),u=e(31),a=e(70),c=[].push,s=function(t){var r=1==t,e=2==t,s=3==t,f=4==t,l=6==t,p=5==t||l;return function(h,y,d,v){for(var b,m,g=i(h),x=o(g),w=n(y,d,3),S=u(x.length),O=0,j=v||a,T=r?j(h,S):e?j(h,0):void 0;S>O;O++)if((p||O in x)&&(m=w(b=x[O],O,g),t))if(r)T[O]=m;else if(m)switch(t){case 3:return!0;case 5:return b;case 6:return O;case 2:c.call(T,b)}else if(f)return!1;return l?-1:s||f?f:T}};t.exports={forEach:s(0),map:s(1),filter:s(2),some:s(3),every:s(4),find:s(5),findIndex:s(6)}},function(t,r,e){var n=e(3),o=e(47),i=e(1)("species");t.exports=function(t,r){var e;return o(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!o(e.prototype)?n(e)&&null===(e=e[i])&&(e=void 0):e=void 0),new(void 0===e?Array:e)(0===r?0:r)}},function(t,r,e){"use strict";var n=e(54),o={};o[e(1)("toStringTag")]="z",t.exports="[object z]"!==String(o)?function(){return"[object "+n(this)+"]"}:o.toString},function(t,r,e){"use strict";var n,o,i,u,a=e(16),c=e(13),s=e(0),f=e(29),l=e(73),p=e(11),h=e(74),y=e(22),d=e(75),v=e(3),b=e(23),m=e(76),g=e(10),x=e(77),w=e(81),S=e(82),O=e(55).set,j=e(83),T=e(84),P=e(85),A=e(57),E=e(86),_=e(56),L=e(14),I=e(45),B=e(1)("species"),k="Promise",M=L.get,F=L.set,R=L.getterFor(k),D=l,C=s.TypeError,U=s.document,N=s.process,G=s.fetch,q=N&&N.versions,H=q&&q.v8||"",V=A.f,z=V,W="process"==g(N),J=!!(U&&U.createEvent&&s.dispatchEvent),K=I(k,(function(){var t=D.resolve(1),r=function(){},e=(t.constructor={})[B]=function(t){t(r,r)};return!((W||"function"==typeof PromiseRejectionEvent)&&(!c||t.finally)&&t.then(r)instanceof e&&0!==H.indexOf("6.6")&&-1===_.indexOf("Chrome/66"))})),Y=K||!w((function(t){D.all(t).catch((function(){}))})),$=function(t){var r;return!(!v(t)||"function"!=typeof(r=t.then))&&r},X=function(t,r,e){if(!r.notified){r.notified=!0;var n=r.reactions;j((function(){for(var o=r.value,i=1==r.state,u=0;n.length>u;){var a,c,s,f=n[u++],l=i?f.ok:f.fail,p=f.resolve,h=f.reject,y=f.domain;try{l?(i||(2===r.rejection&&rt(t,r),r.rejection=1),!0===l?a=o:(y&&y.enter(),a=l(o),y&&(y.exit(),s=!0)),a===f.promise?h(C("Promise-chain cycle")):(c=$(a))?c.call(a,p,h):p(a)):h(o)}catch(t){y&&!s&&y.exit(),h(t)}}r.reactions=[],r.notified=!1,e&&!r.rejection&&Z(t,r)}))}},Q=function(t,r,e){var n,o;J?((n=U.createEvent("Event")).promise=r,n.reason=e,n.initEvent(t,!1,!0),s.dispatchEvent(n)):n={promise:r,reason:e},(o=s["on"+t])?o(n):"unhandledrejection"===t&&P("Unhandled promise rejection",e)},Z=function(t,r){O.call(s,(function(){var e,n=r.value;if(tt(r)&&(e=E((function(){W?N.emit("unhandledRejection",n,t):Q("unhandledrejection",t,n)})),r.rejection=W||tt(r)?2:1,e.error))throw e.value}))},tt=function(t){return 1!==t.rejection&&!t.parent},rt=function(t,r){O.call(s,(function(){W?N.emit("rejectionHandled",t):Q("rejectionhandled",t,r.value)}))},et=function(t,r,e,n){return function(o){t(r,e,o,n)}},nt=function(t,r,e,n){r.done||(r.done=!0,n&&(r=n),r.value=e,r.state=2,X(t,r,!0))},ot=function(t,r,e,n){if(!r.done){r.done=!0,n&&(r=n);try{if(t===e)throw C("Promise can't be resolved itself");var o=$(e);o?j((function(){var n={done:!1};try{o.call(e,et(ot,t,n,r),et(nt,t,n,r))}catch(e){nt(t,n,e,r)}})):(r.value=e,r.state=1,X(t,r,!1))}catch(e){nt(t,{done:!1},e,r)}}};K&&(D=function(t){m(this,D,k),b(t),n.call(this);var r=M(this);try{t(et(ot,this,r),et(nt,this,r))}catch(t){nt(this,r,t)}},(n=function(t){F(this,{type:k,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=h(D.prototype,{then:function(t,r){var e=R(this),n=V(S(this,D));return n.ok="function"!=typeof t||t,n.fail="function"==typeof r&&r,n.domain=W?N.domain:void 0,e.parent=!0,e.reactions.push(n),0!=e.state&&X(this,e,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new n,r=M(t);this.promise=t,this.resolve=et(ot,t,r),this.reject=et(nt,t,r)},A.f=V=function(t){return t===D||t===i?new o(t):z(t)},c||"function"!=typeof l||(u=l.prototype.then,p(l.prototype,"then",(function(t,r){var e=this;return new D((function(t,r){u.call(e,t,r)})).then(t,r)})),"function"==typeof G&&a({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return T(D,G.apply(s,arguments))}}))),a({global:!0,wrap:!0,forced:K},{Promise:D}),y(D,k,!1,!0),d(k),i=f.Promise,a({target:k,stat:!0,forced:K},{reject:function(t){var r=V(this);return r.reject.call(void 0,t),r.promise}}),a({target:k,stat:!0,forced:c||K},{resolve:function(t){return T(c&&this===i?D:this,t)}}),a({target:k,stat:!0,forced:Y},{all:function(t){var r=this,e=V(r),n=e.resolve,o=e.reject,i=E((function(){var e=b(r.resolve),i=[],u=0,a=1;x(t,(function(t){var c=u++,s=!1;i.push(void 0),a++,e.call(r,t).then((function(t){s||(s=!0,i[c]=t,--a||n(i))}),o)})),--a||n(i)}));return i.error&&o(i.value),e.promise},race:function(t){var r=this,e=V(r),n=e.reject,o=E((function(){var o=b(r.resolve);x(t,(function(t){o.call(r,t).then(e.resolve,n)}))}));return o.error&&n(o.value),e.promise}})},function(t,r,e){var n=e(0);t.exports=n.Promise},function(t,r,e){var n=e(11);t.exports=function(t,r,e){for(var o in r)n(t,o,r[o],e);return t}},function(t,r,e){"use strict";var n=e(21),o=e(8),i=e(1),u=e(6),a=i("species");t.exports=function(t){var r=n(t),e=o.f;u&&r&&!r[a]&&e(r,a,{configurable:!0,get:function(){return this}})}},function(t,r){t.exports=function(t,r,e){if(!(t instanceof r))throw TypeError("Incorrect "+(e?e+" ":"")+"invocation");return t}},function(t,r,e){var n=e(4),o=e(78),i=e(31),u=e(36),a=e(79),c=e(80),s=function(t,r){this.stopped=t,this.result=r};(t.exports=function(t,r,e,f,l){var p,h,y,d,v,b,m=u(r,e,f?2:1);if(l)p=t;else{if("function"!=typeof(h=a(t)))throw TypeError("Target is not iterable");if(o(h)){for(y=0,d=i(t.length);d>y;y++)if((v=f?m(n(b=t[y])[0],b[1]):m(t[y]))&&v instanceof s)return v;return new s(!1)}p=h.call(t)}for(;!(b=p.next()).done;)if((v=c(p,m,b.value,f))&&v instanceof s)return v;return new s(!1)}).stop=function(t){return new s(!0,t)}},function(t,r,e){var n=e(1),o=e(15),i=n("iterator"),u=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||u[i]===t)}},function(t,r,e){var n=e(54),o=e(15),i=e(1)("iterator");t.exports=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[n(t)]}},function(t,r,e){var n=e(4);t.exports=function(t,r,e,o){try{return o?r(n(e)[0],e[1]):r(e)}catch(r){var i=t.return;throw void 0!==i&&n(i.call(t)),r}}},function(t,r,e){var n=e(1)("iterator"),o=!1;try{var i=0,u={next:function(){return{done:!!i++}},return:function(){o=!0}};u[n]=function(){return this},Array.from(u,(function(){throw 2}))}catch(t){}t.exports=function(t,r){if(!r&&!o)return!1;var e=!1;try{var i={};i[n]=function(){return{next:function(){return{done:e=!0}}}},t(i)}catch(t){}return e}},function(t,r,e){var n=e(4),o=e(23),i=e(1)("species");t.exports=function(t,r){var e,u=n(t).constructor;return void 0===u||null==(e=n(u)[i])?r:o(e)}},function(t,r,e){var n,o,i,u,a,c,s,f,l=e(0),p=e(17).f,h=e(10),y=e(55).set,d=e(56),v=l.MutationObserver||l.WebKitMutationObserver,b=l.process,m=l.Promise,g="process"==h(b),x=p(l,"queueMicrotask"),w=x&&x.value;w||(n=function(){var t,r;for(g&&(t=b.domain)&&t.exit();o;){r=o.fn,o=o.next;try{r()}catch(t){throw o?u():i=void 0,t}}i=void 0,t&&t.enter()},g?u=function(){b.nextTick(n)}:v&&!/(iphone|ipod|ipad).*applewebkit/i.test(d)?(a=!0,c=document.createTextNode(""),new v(n).observe(c,{characterData:!0}),u=function(){c.data=a=!a}):m&&m.resolve?(s=m.resolve(void 0),f=s.then,u=function(){f.call(s,n)}):u=function(){y.call(l,n)}),t.exports=w||function(t){var r={fn:t,next:void 0};i&&(i.next=r),o||(o=r,u()),i=r}},function(t,r,e){var n=e(4),o=e(3),i=e(57);t.exports=function(t,r){if(n(t),o(r)&&r.constructor===t)return r;var e=i.f(t);return(0,e.resolve)(r),e.promise}},function(t,r,e){var n=e(0);t.exports=function(t,r){var e=n.console;e&&e.error&&(1===arguments.length?e.error(t):e.error(t,r))}},function(t,r){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},function(t,r,e){e(51)("iterator")},function(t,r,e){var n=e(1),o=e(35),i=e(5),u=n("unscopables"),a=Array.prototype;null==a[u]&&i(a,u,o(null)),t.exports=function(t){a[u][t]=!0}},function(t,r,e){"use strict";var n=e(60).IteratorPrototype,o=e(35),i=e(18),u=e(22),a=e(15),c=function(){return this};t.exports=function(t,r,e){var s=r+" Iterator";return t.prototype=o(n,{next:i(1,e)}),u(t,s,!1,!0),a[s]=c,t}},function(t,r,e){var n=e(7);t.exports=!n((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},function(t,r,e){var n=e(4),o=e(92);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,r=!1,e={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(e,[]),r=e instanceof Array}catch(t){}return function(e,i){return n(e),o(i),r?t.call(e,i):e.__proto__=i,e}}():void 0)},function(t,r,e){var n=e(3);t.exports=function(t){if(!n(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},function(t,r,e){"use strict";var n=e(94).charAt,o=e(14),i=e(59),u=o.set,a=o.getterFor("String Iterator");i(String,"String",(function(t){u(this,{type:"String Iterator",string:String(t),index:0})}),(function(){var t,r=a(this),e=r.string,o=r.index;return o>=e.length?{value:void 0,done:!0}:(t=n(e,o),r.index+=t.length,{value:t,done:!1})}))},function(t,r,e){var n=e(32),o=e(24),i=function(t){return function(r,e){var i,u,a=String(o(r)),c=n(e),s=a.length;return c<0||c>=s?t?"":void 0:(i=a.charCodeAt(c))<55296||i>56319||c+1===s||(u=a.charCodeAt(c+1))<56320||u>57343?t?a.charAt(c):i:t?a.slice(c,c+2):u-56320+(i-55296<<10)+65536}};t.exports={codeAt:i(!1),charAt:i(!0)}},function(t,r,e){var n=e(0),o=e(96),i=e(58),u=e(5),a=e(1),c=a("iterator"),s=a("toStringTag"),f=i.values;for(var l in o){var p=n[l],h=p&&p.prototype;if(h){if(h[c]!==f)try{u(h,c,f)}catch(t){h[c]=f}if(h[s]||u(h,s,l),o[l])for(var y in i)if(h[y]!==i[y])try{u(h,y,i[y])}catch(t){h[y]=i[y]}}}},function(t,r){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,r,e){"use strict";e.r(r);e(37),e(52),e(53),e(72);e(87),e(58),e(93),e(95);var n={searchParams:"URLSearchParams"in self,iterable:"Symbol"in self&&"iterator"in Symbol,blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self};if(n.arrayBuffer)var o=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],i=ArrayBuffer.isView||function(t){return t&&o.indexOf(Object.prototype.toString.call(t))>-1};function u(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function a(t){return"string"!=typeof t&&(t=String(t)),t}function c(t){var r={next:function(){var r=t.shift();return{done:void 0===r,value:r}}};return n.iterable&&(r[Symbol.iterator]=function(){return r}),r}function s(t){this.map={},t instanceof s?t.forEach((function(t,r){this.append(r,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(r){this.append(r,t[r])}),this)}function f(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function l(t){return new Promise((function(r,e){t.onload=function(){r(t.result)},t.onerror=function(){e(t.error)}}))}function p(t){var r=new FileReader,e=l(r);return r.readAsArrayBuffer(t),e}function h(t){if(t.slice)return t.slice(0);var r=new Uint8Array(t.byteLength);return r.set(new Uint8Array(t)),r.buffer}function y(){return this.bodyUsed=!1,this._initBody=function(t){var r;this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:n.blob&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:n.formData&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:n.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():n.arrayBuffer&&n.blob&&((r=t)&&DataView.prototype.isPrototypeOf(r))?(this._bodyArrayBuffer=h(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):n.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(t)||i(t))?this._bodyArrayBuffer=h(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):n.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},n.blob&&(this.blob=function(){var t=f(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?f(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(p)}),this.text=function(){var t,r,e,n=f(this);if(n)return n;if(this._bodyBlob)return t=this._bodyBlob,r=new FileReader,e=l(r),r.readAsText(t),e;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var r=new Uint8Array(t),e=new Array(r.length),n=0;n<r.length;n++)e[n]=String.fromCharCode(r[n]);return e.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},n.formData&&(this.formData=function(){return this.text().then(b)}),this.json=function(){return this.text().then(JSON.parse)},this}s.prototype.append=function(t,r){t=u(t),r=a(r);var e=this.map[t];this.map[t]=e?e+", "+r:r},s.prototype.delete=function(t){delete this.map[u(t)]},s.prototype.get=function(t){return t=u(t),this.has(t)?this.map[t]:null},s.prototype.has=function(t){return this.map.hasOwnProperty(u(t))},s.prototype.set=function(t,r){this.map[u(t)]=a(r)},s.prototype.forEach=function(t,r){for(var e in this.map)this.map.hasOwnProperty(e)&&t.call(r,this.map[e],e,this)},s.prototype.keys=function(){var t=[];return this.forEach((function(r,e){t.push(e)})),c(t)},s.prototype.values=function(){var t=[];return this.forEach((function(r){t.push(r)})),c(t)},s.prototype.entries=function(){var t=[];return this.forEach((function(r,e){t.push([e,r])})),c(t)},n.iterable&&(s.prototype[Symbol.iterator]=s.prototype.entries);var d=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function v(t,r){var e,n,o=(r=r||{}).body;if(t instanceof v){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,r.headers||(this.headers=new s(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,o||null==t._bodyInit||(o=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=r.credentials||this.credentials||"same-origin",!r.headers&&this.headers||(this.headers=new s(r.headers)),this.method=(e=r.method||this.method||"GET",n=e.toUpperCase(),d.indexOf(n)>-1?n:e),this.mode=r.mode||this.mode||null,this.signal=r.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(o)}function b(t){var r=new FormData;return t.trim().split("&").forEach((function(t){if(t){var e=t.split("="),n=e.shift().replace(/\+/g," "),o=e.join("=").replace(/\+/g," ");r.append(decodeURIComponent(n),decodeURIComponent(o))}})),r}function m(t,r){r||(r={}),this.type="default",this.status=void 0===r.status?200:r.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in r?r.statusText:"OK",this.headers=new s(r.headers),this.url=r.url||"",this._initBody(t)}v.prototype.clone=function(){return new v(this,{body:this._bodyInit})},y.call(v.prototype),y.call(m.prototype),m.prototype.clone=function(){return new m(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new s(this.headers),url:this.url})},m.error=function(){var t=new m(null,{status:0,statusText:""});return t.type="error",t};var g=[301,302,303,307,308];m.redirect=function(t,r){if(-1===g.indexOf(r))throw new RangeError("Invalid status code");return new m(null,{status:r,headers:{location:t}})};var x=self.DOMException;try{new x}catch(t){(x=function(t,r){this.message=t,this.name=r;var e=Error(t);this.stack=e.stack}).prototype=Object.create(Error.prototype),x.prototype.constructor=x}function w(t,r){return new Promise((function(e,o){var i=new v(t,r);if(i.signal&&i.signal.aborted)return o(new x("Aborted","AbortError"));var u=new XMLHttpRequest;function a(){u.abort()}u.onload=function(){var t,r,n={status:u.status,statusText:u.statusText,headers:(t=u.getAllResponseHeaders()||"",r=new s,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(t){var e=t.split(":"),n=e.shift().trim();if(n){var o=e.join(":").trim();r.append(n,o)}})),r)};n.url="responseURL"in u?u.responseURL:n.headers.get("X-Request-URL");var o="response"in u?u.response:u.responseText;e(new m(o,n))},u.onerror=function(){o(new TypeError("Network request failed"))},u.ontimeout=function(){o(new TypeError("Network request failed"))},u.onabort=function(){o(new x("Aborted","AbortError"))},u.open(i.method,i.url,!0),"include"===i.credentials?u.withCredentials=!0:"omit"===i.credentials&&(u.withCredentials=!1),"responseType"in u&&n.blob&&(u.responseType="blob"),i.headers.forEach((function(t,r){u.setRequestHeader(r,t)})),i.signal&&(i.signal.addEventListener("abort",a),u.onreadystatechange=function(){4===u.readyState&&i.signal.removeEventListener("abort",a)}),u.send(void 0===i._bodyInit?null:i._bodyInit)}))}w.polyfill=!0,self.fetch||(self.fetch=w,self.Headers=s,self.Request=v,self.Response=m),document.addEventListener("DOMContentLoaded",(function(){var t,r=document.querySelector("#regexp"),e=document.querySelector("#description");t=function(t){r.value=t.regexp,e.value=t.description,function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],r=document.querySelector(".samples"),e="",n=!0,o=!1,i=void 0;try{for(var u,a=t[Symbol.iterator]();!(n=(u=a.next()).done);n=!0){var c=u.value;e+='<div class="sample">\n            <input class="input" type="text" placeholder="Sample" value='.concat(c,'>\n            <div class="answer no-match"><span>Don\'t match</span></div>\n        </div>')}}catch(t){o=!0,i=t}finally{try{n||null==a.return||a.return()}finally{if(o)throw i}}r.innerHTML=e}(t.samples)},fetch("/api/tasks?id=1").then((function(t){if(t.ok)return t.json();throw new Error("Can`t find file")})).then((function(r){t(r)})).catch((function(t){console.error(t.message)}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YtcmF3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYmluZC1jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93cmFwcGVkLXdlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuZGVzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91c2VyLWFnZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1wcm9taXNlLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wZXJmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb20taXRlcmFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93aGF0d2ctZmV0Y2gvZmV0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9jbGllbnQvc3JjL2pzLW1vZHVsZXMvZ2V0LWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9qcy1tb2R1bGVzL3NhbXBsZS5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImNoZWNrIiwiaXQiLCJNYXRoIiwiZ2xvYmFsVGhpcyIsIk8iLCJ3aW5kb3ciLCJzZWxmIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJzaGFyZWQiLCJ1aWQiLCJOQVRJVkVfU1lNQk9MIiwic3RvcmUiLCJpc09iamVjdCIsIlR5cGVFcnJvciIsIlN0cmluZyIsIkRFU0NSSVBUT1JTIiwiZGVmaW5lUHJvcGVydHlNb2R1bGUiLCJjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IiLCJmIiwiZmFpbHMiLCJhIiwiZXhlYyIsImVycm9yIiwiSUU4X0RPTV9ERUZJTkUiLCJhbk9iamVjdCIsInRvUHJpbWl0aXZlIiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJQIiwiQXR0cmlidXRlcyIsIkluZGV4ZWRPYmplY3QiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwidG9TdHJpbmciLCJzbGljZSIsImhpZGUiLCJoYXMiLCJzZXRHbG9iYWwiLCJuYXRpdmVGdW5jdGlvblRvU3RyaW5nIiwiSW50ZXJuYWxTdGF0ZU1vZHVsZSIsImdldEludGVybmFsU3RhdGUiLCJlbmZvcmNlSW50ZXJuYWxTdGF0ZSIsImVuZm9yY2UiLCJURU1QTEFURSIsInNwbGl0Iiwib3B0aW9ucyIsInVuc2FmZSIsInNpbXBsZSIsIm5vVGFyZ2V0R2V0Iiwic291cmNlIiwiam9pbiIsInRoaXMiLCJJU19QVVJFIiwidW5kZWZpbmVkIiwicHVzaCIsInZlcnNpb24iLCJjb3B5cmlnaHQiLCJzZXQiLCJOQVRJVkVfV0VBS19NQVAiLCJvYmplY3RIYXMiLCJzaGFyZWRLZXkiLCJoaWRkZW5LZXlzIiwiV2Vha01hcCIsIndtZ2V0Iiwid21oYXMiLCJ3bXNldCIsIm1ldGFkYXRhIiwiU1RBVEUiLCJnZXR0ZXJGb3IiLCJUWVBFIiwic3RhdGUiLCJ0eXBlIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwicmVkZWZpbmUiLCJjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzIiwiaXNGb3JjZWQiLCJ0YXJnZXQiLCJ0YXJnZXRQcm9wZXJ0eSIsInNvdXJjZVByb3BlcnR5IiwiZGVzY3JpcHRvciIsIlRBUkdFVCIsIkdMT0JBTCIsIlNUQVRJQyIsInN0YXQiLCJmb3JjZWQiLCJzaGFtIiwicHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUiLCJ0b0luZGV4ZWRPYmplY3QiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJiaXRtYXAiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImtleXMiLCJwYXRoIiwiYUZ1bmN0aW9uIiwidmFyaWFibGUiLCJuYW1lc3BhY2UiLCJtZXRob2QiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJUT19TVFJJTkdfVEFHIiwid2VsbEtub3duU3ltYm9sIiwiVEFHIiwiaW5wdXQiLCJQUkVGRVJSRURfU1RSSU5HIiwiZm4iLCJ2YWwiLCJ2YWx1ZU9mIiwiZG9jdW1lbnQiLCJFWElTVFMiLCJjcmVhdGVFbGVtZW50IiwiaWQiLCJwb3N0Zml4IiwicmFuZG9tIiwiaW50ZXJuYWxPYmplY3RLZXlzIiwiY29uY2F0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInRvSW50ZWdlciIsIm1pbiIsImFyZ3VtZW50IiwiY2VpbCIsImZsb29yIiwiaXNOYU4iLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZW51bUJ1Z0tleXMiLCJodG1sIiwiZG9jdW1lbnRDcmVhdGVFbGVtZW50IiwiSUVfUFJPVE8iLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwic3JjIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJ3cml0ZSIsImx0IiwiY2xvc2UiLCJGIiwiUHJvcGVydGllcyIsInJlc3VsdCIsInRoYXQiLCJiIiwiYXBwbHkiLCIkIiwiaXNBcnJheSIsInRvT2JqZWN0IiwibmF0aXZlT2JqZWN0Q3JlYXRlIiwib2JqZWN0S2V5cyIsImdldE93blByb3BlcnR5TmFtZXNNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUiLCJ3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlIiwiZGVmaW5lV2VsbEtub3duU3ltYm9sIiwic2V0VG9TdHJpbmdUYWciLCIkZm9yRWFjaCIsImZvckVhY2giLCJISURERU4iLCJUT19QUklNSVRJVkUiLCJzZXRJbnRlcm5hbFN0YXRlIiwiT2JqZWN0UHJvdG90eXBlIiwiJFN5bWJvbCIsIkpTT04iLCJuYXRpdmVKU09OU3RyaW5naWZ5Iiwic3RyaW5naWZ5IiwibmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyIsIm5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQWxsU3ltYm9scyIsIk9iamVjdFByb3RvdHlwZVN5bWJvbHMiLCJTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5IiwiU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSIsIldlbGxLbm93blN5bWJvbHNTdG9yZSIsIlFPYmplY3QiLCJVU0VfU0VUVEVSIiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzY3JpcHRvciIsIk9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IiLCJ3cmFwIiwidGFnIiwiZGVzY3JpcHRpb24iLCJzeW1ib2wiLCJpc1N5bWJvbCIsIml0ZXJhdG9yIiwiJGRlZmluZVByb3BlcnR5IiwiJGRlZmluZVByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIlYiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCJuYW1lcyIsIklTX09CSkVDVF9QUk9UT1RZUEUiLCJzZXR0ZXIiLCJzdHJpbmciLCJrZXlGb3IiLCJzeW0iLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJyZXBsYWNlciIsIiRyZXBsYWNlciIsImFyZ3MiLCJpbmRleCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiTkFTSE9STl9CVUciLCIxIiwiY2xhc3NvZiIsIm93bktleXMiLCJpbmRleE9mIiwicmVwbGFjZW1lbnQiLCJmZWF0dXJlIiwiZGV0ZWN0aW9uIiwiZGF0YSIsIm5vcm1hbGl6ZSIsIlBPTFlGSUxMIiwiTkFUSVZFIiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwiQXJyYXkiLCJhcmciLCJnZXRCdWlsdEluIiwiTkFNRSIsIk5hdGl2ZVN5bWJvbCIsIkVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSIsIlN5bWJvbFdyYXBwZXIiLCJzeW1ib2xQcm90b3R5cGUiLCJjb25zdHJ1Y3RvciIsInN5bWJvbFRvU3RyaW5nIiwibmF0aXZlIiwicmVnZXhwIiwiZGVzYyIsImNsYXNzb2ZSYXciLCJDT1JSRUNUX0FSR1VNRU5UUyIsInRyeUdldCIsImNhbGxlZSIsImRlZmVyIiwiY2hhbm5lbCIsInBvcnQiLCJsb2NhdGlvbiIsInNldEltbWVkaWF0ZSIsImNsZWFyIiwiY2xlYXJJbW1lZGlhdGUiLCJwcm9jZXNzIiwiTWVzc2FnZUNoYW5uZWwiLCJEaXNwYXRjaCIsImNvdW50ZXIiLCJxdWV1ZSIsInJ1biIsInJ1bm5lciIsImxpc3RlbmVyIiwiZXZlbnQiLCJwb3N0IiwicG9zdE1lc3NhZ2UiLCJwcm90b2NvbCIsImhvc3QiLCJuZXh0VGljayIsIm5vdyIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaW1wb3J0U2NyaXB0cyIsInJlbW92ZUNoaWxkIiwic2V0VGltZW91dCIsIlByb21pc2VDYXBhYmlsaXR5IiwiQyIsInJlc29sdmUiLCJyZWplY3QiLCJwcm9taXNlIiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCJhZGRUb1Vuc2NvcGFibGVzIiwiSXRlcmF0b3JzIiwiZGVmaW5lSXRlcmF0b3IiLCJpdGVyYXRlZCIsImtpbmQiLCJkb25lIiwiQXJndW1lbnRzIiwiY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciIsImdldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJJdGVyYXRvcnNDb3JlIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJCVUdHWV9TQUZBUklfSVRFUkFUT1JTIiwiSVRFUkFUT1IiLCJyZXR1cm5UaGlzIiwiSXRlcmFibGUiLCJJdGVyYXRvckNvbnN0cnVjdG9yIiwibmV4dCIsIkRFRkFVTFQiLCJJU19TRVQiLCJGT1JDRUQiLCJDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUiLCJtZXRob2RzIiwiS0VZIiwiZ2V0SXRlcmF0aW9uTWV0aG9kIiwiS0lORCIsImRlZmF1bHRJdGVyYXRvciIsIkl0ZXJhYmxlUHJvdG90eXBlIiwiSU5DT1JSRUNUX1ZBTFVFU19OQU1FIiwibmF0aXZlSXRlcmF0b3IiLCJhbnlOYXRpdmVJdGVyYXRvciIsImVudHJpZXMiLCJ2YWx1ZXMiLCJwcm90byIsIlByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSIsImFycmF5SXRlcmF0b3IiLCJDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIiLCJnIiwiZSIsInRlc3QiLCJ0b0xlbmd0aCIsInRvQWJzb2x1dGVJbmRleCIsImNyZWF0ZU1ldGhvZCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJlbCIsImZyb21JbmRleCIsImluY2x1ZGVzIiwibWF4IiwiaW50ZWdlciIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCJjYWxsYmFja2ZuIiwic3BlY2lmaWNDcmVhdGUiLCJib3VuZEZ1bmN0aW9uIiwibWFwIiwiZmlsdGVyIiwic29tZSIsImV2ZXJ5IiwiZmluZCIsImZpbmRJbmRleCIsIlNQRUNJRVMiLCJvcmlnaW5hbEFycmF5IiwiSW50ZXJuYWwiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIlByb21pc2VXcmFwcGVyIiwibmF0aXZlVGhlbiIsIk5hdGl2ZVByb21pc2UiLCJyZWRlZmluZUFsbCIsInNldFNwZWNpZXMiLCJhbkluc3RhbmNlIiwiaXRlcmF0ZSIsImNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiIsInNwZWNpZXNDb25zdHJ1Y3RvciIsInRhc2siLCJtaWNyb3Rhc2siLCJwcm9taXNlUmVzb2x2ZSIsImhvc3RSZXBvcnRFcnJvcnMiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsInBlcmZvcm0iLCJ1c2VyQWdlbnQiLCJQUk9NSVNFIiwiZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUiLCJQcm9taXNlQ29uc3RydWN0b3IiLCIkZmV0Y2giLCJmZXRjaCIsInZlcnNpb25zIiwidjgiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eSIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIklTX05PREUiLCJESVNQQVRDSF9FVkVOVCIsImNyZWF0ZUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImVtcHR5IiwiRmFrZVByb21pc2UiLCJQcm9taXNlUmVqZWN0aW9uRXZlbnQiLCJ0aGVuIiwiSU5DT1JSRUNUX0lURVJBVElPTiIsIml0ZXJhYmxlIiwiYWxsIiwiaXNUaGVuYWJsZSIsIm5vdGlmeSIsImlzUmVqZWN0Iiwibm90aWZpZWQiLCJjaGFpbiIsInJlYWN0aW9ucyIsIm9rIiwiZXhpdGVkIiwicmVhY3Rpb24iLCJoYW5kbGVyIiwiZmFpbCIsImRvbWFpbiIsInJlamVjdGlvbiIsIm9uSGFuZGxlVW5oYW5kbGVkIiwiZW50ZXIiLCJleGl0Iiwib25VbmhhbmRsZWQiLCJyZWFzb24iLCJpbml0RXZlbnQiLCJpc1VuaGFuZGxlZCIsImVtaXQiLCJwYXJlbnQiLCJ1bndyYXAiLCJpbnRlcm5hbFJlamVjdCIsImludGVybmFsUmVzb2x2ZSIsIndyYXBwZXIiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsIlByb21pc2UiLCJjYXBhYmlsaXR5IiwieCIsIiRwcm9taXNlUmVzb2x2ZSIsInJlbWFpbmluZyIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiQ09OU1RSVUNUT1JfTkFNRSIsIkNvbnN0cnVjdG9yIiwiaXNBcnJheUl0ZXJhdG9yTWV0aG9kIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nIiwiUmVzdWx0Iiwic3RvcHBlZCIsIkFTX0VOVFJJRVMiLCJJU19JVEVSQVRPUiIsIml0ZXJGbiIsInN0ZXAiLCJzdG9wIiwiQXJyYXlQcm90b3R5cGUiLCJFTlRSSUVTIiwicmV0dXJuTWV0aG9kIiwiU0FGRV9DTE9TSU5HIiwiY2FsbGVkIiwiaXRlcmF0b3JXaXRoUmV0dXJuIiwiZnJvbSIsIlNLSVBfQ0xPU0lORyIsIklURVJBVElPTl9TVVBQT1JUIiwiZGVmYXVsdENvbnN0cnVjdG9yIiwiUyIsImZsdXNoIiwiaGVhZCIsImxhc3QiLCJ0b2dnbGUiLCJub2RlIiwibWFjcm90YXNrIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IiLCJxdWV1ZU1pY3JvdGFzayIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJwcm9taXNlQ2FwYWJpbGl0eSIsImNvbnNvbGUiLCJVTlNDT1BBQkxFUyIsImFQb3NzaWJsZVByb3RvdHlwZSIsIkNPUlJFQ1RfU0VUVEVSIiwiX19wcm90b19fIiwiY2hhckF0IiwicG9pbnQiLCJDT05WRVJUX1RPX1NUUklORyIsInBvcyIsImZpcnN0Iiwic2Vjb25kIiwicG9zaXRpb24iLCJzaXplIiwiY2hhckNvZGVBdCIsImNvZGVBdCIsIkRPTUl0ZXJhYmxlcyIsIkFycmF5SXRlcmF0b3JNZXRob2RzIiwiQXJyYXlWYWx1ZXMiLCJDT0xMRUNUSU9OX05BTUUiLCJDb2xsZWN0aW9uIiwiQ29sbGVjdGlvblByb3RvdHlwZSIsIk1FVEhPRF9OQU1FIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJzdXBwb3J0Iiwic2VhcmNoUGFyYW1zIiwiYmxvYiIsIkJsb2IiLCJmb3JtRGF0YSIsImFycmF5QnVmZmVyIiwidmlld0NsYXNzZXMiLCJpc0FycmF5QnVmZmVyVmlldyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3Iiwib2JqIiwibm9ybWFsaXplTmFtZSIsIm5vcm1hbGl6ZVZhbHVlIiwiaXRlcmF0b3JGb3IiLCJpdGVtcyIsInNoaWZ0IiwiSGVhZGVycyIsImhlYWRlcnMiLCJhcHBlbmQiLCJoZWFkZXIiLCJjb25zdW1lZCIsImJvZHkiLCJib2R5VXNlZCIsImZpbGVSZWFkZXJSZWFkeSIsInJlYWRlciIsIm9ubG9hZCIsIm9uZXJyb3IiLCJyZWFkQmxvYkFzQXJyYXlCdWZmZXIiLCJGaWxlUmVhZGVyIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJidWZmZXJDbG9uZSIsImJ1ZiIsInZpZXciLCJVaW50OEFycmF5IiwiYnl0ZUxlbmd0aCIsImJ1ZmZlciIsIkJvZHkiLCJfaW5pdEJvZHkiLCJfYm9keUluaXQiLCJfYm9keVRleHQiLCJpc1Byb3RvdHlwZU9mIiwiX2JvZHlCbG9iIiwiRm9ybURhdGEiLCJfYm9keUZvcm1EYXRhIiwiVVJMU2VhcmNoUGFyYW1zIiwiRGF0YVZpZXciLCJfYm9keUFycmF5QnVmZmVyIiwicmVqZWN0ZWQiLCJFcnJvciIsInRleHQiLCJyZWFkQXNUZXh0IiwiY2hhcnMiLCJmcm9tQ2hhckNvZGUiLCJyZWFkQXJyYXlCdWZmZXJBc1RleHQiLCJkZWNvZGUiLCJqc29uIiwicGFyc2UiLCJvbGRWYWx1ZSIsImNhbGxiYWNrIiwidGhpc0FyZyIsIlJlcXVlc3QiLCJ1cGNhc2VkIiwidXJsIiwiY3JlZGVudGlhbHMiLCJzaWduYWwiLCJ0b1VwcGVyQ2FzZSIsInJlZmVycmVyIiwiZm9ybSIsInRyaW0iLCJieXRlcyIsImRlY29kZVVSSUNvbXBvbmVudCIsIlJlc3BvbnNlIiwiYm9keUluaXQiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiY2xvbmUiLCJyZXNwb25zZSIsInJlZGlyZWN0U3RhdHVzZXMiLCJyZWRpcmVjdCIsIlJhbmdlRXJyb3IiLCJET01FeGNlcHRpb24iLCJlcnIiLCJtZXNzYWdlIiwic3RhY2siLCJpbml0IiwicmVxdWVzdCIsImFib3J0ZWQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsImFib3J0WGhyIiwiYWJvcnQiLCJyYXdIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwibGluZSIsInBhcnRzIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZVRleHQiLCJvbnRpbWVvdXQiLCJvbmFib3J0Iiwid2l0aENyZWRlbnRpYWxzIiwicmVzcG9uc2VUeXBlIiwic2V0UmVxdWVzdEhlYWRlciIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2VuZCIsInBvbHlmaWxsIiwicmVuZGVyQ2FsbGJhY2siLCJxdWVyeVNlbGVjdG9yIiwiZGIiLCJzYW1wbGVzIiwic2FtcGxlc0VsZW0iLCJzYW1wbGVzVGV4dCIsInNhbXBsZSIsImlubmVySFRNTCIsImNyZWF0ZVNhbXBsZXMiLCJjYXRjaCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVY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LEtBS2xERixFQUFJa0IsVUFBa0MsSUFBdEJwQixFQUFRL0MsVUFBNEIsS0FBTytDLEVBQVEvQyxjQUl2RSxFQUFNb0UsVUFBVyxFQUVaam1CLEtBQUt5VyxRQUNSelcsS0FBS3lXLE1BQVEsRUFDYnpXLEtBQUt1Z0IsUUFBVUEsRUFDZnZnQixLQUFLbWpCLFFBQVVBLEVBQ2ZuakIsS0FBSzhqQixTQUFXQSxHQzlmbEJ6ZCxTQUFTNkosaUJBQWlCLG9CQUFvQixXQUMxQyxJQ0xtQ2dXLEVESzdCL1gsRUFBUzlILFNBQVM4ZixjQUFjLFdBQ2hDbmIsRUFBYzNFLFNBQVM4ZixjQUFjLGdCQ05SRCxFRE9FLFNBQUNFLEdBQ2xDalksRUFBT3hQLE1BQVF5bkIsRUFBR2pZLE9BQ2xCbkQsRUFBWXJNLE1BQVF5bkIsRUFBR3BiLFlFVHhCLFdBQXFDLElBQWRxYixFQUFjLHVEQUFKLEdBQzlCQyxFQUFjamdCLFNBQVM4ZixjQUFjLFlBQ3ZDSSxFQUFjLEdBRnNCLHVCQUd4QyxZQUFxQkYsRUFBckIsK0NBQThCLEtBQW5CRyxFQUFtQixRQUMxQkQsR0FBZSxpR0FBSixPQUN1REMsRUFEdkQsZ0dBSnlCLGtGQVN4Q0YsRUFBWUcsVUFBWUYsRUZDcEJHLENBQWNOLEVBQUdDLFVDVHJCNVAsTURNa0IsbUJDTGpCWSxNQUFLLFNBQUE4TSxHQUNGLEdBQUdBLEVBQVNwTSxHQUFJLE9BQU9vTSxFQUFTckIsT0FDaEMsTUFBTSxJQUFJUCxNQUFNLHNCQUVuQmxMLE1BQUssU0FBQStPLEdBQ0ZGLEVBQWVFLE1BRWxCTyxPQUFNLFNBQUFuQyxHQUNIdEksUUFBUWpiLE1BQU11akIsRUFBSUMiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA5Nyk7XG4iLCJ2YXIgTyA9ICdvYmplY3QnO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxubW9kdWxlLmV4cG9ydHMgPVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gTyAmJiBnbG9iYWxUaGlzKSB8fFxuICBjaGVjayh0eXBlb2Ygd2luZG93ID09IE8gJiYgd2luZG93KSB8fFxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSBPICYmIHNlbGYpIHx8XG4gIGNoZWNrKHR5cGVvZiBnbG9iYWwgPT0gTyAmJiBnbG9iYWwpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xuXG52YXIgU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBzdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9IE5BVElWRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdXG4gICAgfHwgKE5BVElWRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xuXG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZURlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSW5kZXhlZE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGl0KSk7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgbmF0aXZlRnVuY3Rpb25Ub1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi10by1zdHJpbmcnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmVuZm9yY2U7XG52YXIgVEVNUExBVEUgPSBTdHJpbmcobmF0aXZlRnVuY3Rpb25Ub1N0cmluZykuc3BsaXQoJ3RvU3RyaW5nJyk7XG5cbnNoYXJlZCgnaW5zcGVjdFNvdXJjZScsIGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gbmF0aXZlRnVuY3Rpb25Ub1N0cmluZy5jYWxsKGl0KTtcbn0pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICB2YXIgdW5zYWZlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy51bnNhZmUgOiBmYWxzZTtcbiAgdmFyIHNpbXBsZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMuZW51bWVyYWJsZSA6IGZhbHNlO1xuICB2YXIgbm9UYXJnZXRHZXQgPSBvcHRpb25zID8gISFvcHRpb25zLm5vVGFyZ2V0R2V0IDogZmFsc2U7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICh0eXBlb2Yga2V5ID09ICdzdHJpbmcnICYmICFoYXModmFsdWUsICduYW1lJykpIGhpZGUodmFsdWUsICduYW1lJywga2V5KTtcbiAgICBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh2YWx1ZSkuc291cmNlID0gVEVNUExBVEUuam9pbih0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8ga2V5IDogJycpO1xuICB9XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgICBlbHNlIHNldEdsb2JhbChrZXksIHZhbHVlKTtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAoIXVuc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gIH0gZWxzZSBpZiAoIW5vVGFyZ2V0R2V0ICYmIE9ba2V5XSkge1xuICAgIHNpbXBsZSA9IHRydWU7XG4gIH1cbiAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gIGVsc2UgaGlkZShPLCBrZXksIHZhbHVlKTtcbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zb3VyY2UgfHwgbmF0aXZlRnVuY3Rpb25Ub1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjIuMScsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZScpO1xudmFyIG9iamVjdEhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcbnZhciBzZXQsIGdldCwgaGFzO1xuXG52YXIgZW5mb3JjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaGFzKGl0KSA/IGdldChpdCkgOiBzZXQoaXQsIHt9KTtcbn07XG5cbnZhciBnZXR0ZXJGb3IgPSBmdW5jdGlvbiAoVFlQRSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIHN0YXRlO1xuICAgIGlmICghaXNPYmplY3QoaXQpIHx8IChzdGF0ZSA9IGdldChpdCkpLnR5cGUgIT09IFRZUEUpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQnKTtcbiAgICB9IHJldHVybiBzdGF0ZTtcbiAgfTtcbn07XG5cbmlmIChOQVRJVkVfV0VBS19NQVApIHtcbiAgdmFyIHN0b3JlID0gbmV3IFdlYWtNYXAoKTtcbiAgdmFyIHdtZ2V0ID0gc3RvcmUuZ2V0O1xuICB2YXIgd21oYXMgPSBzdG9yZS5oYXM7XG4gIHZhciB3bXNldCA9IHN0b3JlLnNldDtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIHdtc2V0LmNhbGwoc3RvcmUsIGl0LCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21nZXQuY2FsbChzdG9yZSwgaXQpIHx8IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21oYXMuY2FsbChzdG9yZSwgaXQpO1xuICB9O1xufSBlbHNlIHtcbiAgdmFyIFNUQVRFID0gc2hhcmVkS2V5KCdzdGF0ZScpO1xuICBoaWRkZW5LZXlzW1NUQVRFXSA9IHRydWU7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBoaWRlKGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xuXG4vKlxuICBvcHRpb25zLnRhcmdldCAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICBvcHRpb25zLmdsb2JhbCAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG4gIG9wdGlvbnMuc3RhdCAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucHJvdG8gICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucmVhbCAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLmZvcmNlZCAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZVxuICBvcHRpb25zLmJpbmQgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy53cmFwICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLnVuc2FmZSAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5XG4gIG9wdGlvbnMuc2hhbSAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gIG9wdGlvbnMuZW51bWVyYWJsZSAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuICBvcHRpb25zLm5vVGFyZ2V0R2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldFxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMsIHNvdXJjZSkge1xuICB2YXIgVEFSR0VUID0gb3B0aW9ucy50YXJnZXQ7XG4gIHZhciBHTE9CQUwgPSBvcHRpb25zLmdsb2JhbDtcbiAgdmFyIFNUQVRJQyA9IG9wdGlvbnMuc3RhdDtcbiAgdmFyIEZPUkNFRCwgdGFyZ2V0LCBrZXksIHRhcmdldFByb3BlcnR5LCBzb3VyY2VQcm9wZXJ0eSwgZGVzY3JpcHRvcjtcbiAgaWYgKEdMT0JBTCkge1xuICAgIHRhcmdldCA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmIChTVEFUSUMpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWxbVEFSR0VUXSB8fCBzZXRHbG9iYWwoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gKGdsb2JhbFtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XG4gIH1cbiAgaWYgKHRhcmdldCkgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAob3B0aW9ucy5ub1RhcmdldEdldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcbiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpIGNvbnRpbnVlO1xuICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpO1xuICAgIH1cbiAgICAvLyBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAodGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkpIHtcbiAgICAgIGhpZGUoc291cmNlUHJvcGVydHksICdzaGFtJywgdHJ1ZSk7XG4gICAgfVxuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICByZWRlZmluZSh0YXJnZXQsIGtleSwgc291cmNlUHJvcGVydHksIG9wdGlvbnMpO1xuICB9XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcblxudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCFwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcblxudmFyIGtleXMgPSBzaGFyZWQoJ2tleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBrZXlzW2tleV0gfHwgKGtleXNba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YXJpYWJsZSkge1xuICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09ICdmdW5jdGlvbicgPyB2YXJpYWJsZSA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihwYXRoW25hbWVzcGFjZV0pIHx8IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSlcbiAgICA6IHBhdGhbbmFtZXNwYWNlXSAmJiBwYXRoW25hbWVzcGFjZV1bbWV0aG9kXSB8fCBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVEFHLCBTVEFUSUMpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBTVEFUSUMgPyBpdCA6IGl0LnByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRykpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShpdCwgVE9fU1RSSU5HX1RBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiBUQUcgfSk7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwiLy8gYFJlcXVpcmVPYmplY3RDb2VyY2libGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVxdWlyZW9iamVjdGNvZXJjaWJsZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbi8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgUFJFRkVSUkVEX1NUUklORykge1xuICBpZiAoIWlzT2JqZWN0KGlucHV0KSkgcmV0dXJuIGlucHV0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaW5wdXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBFWElTVFMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBFWElTVFMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICBoaWRlKGdsb2JhbCwga2V5LCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZ2xvYmFsW2tleV0gPSB2YWx1ZTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuIiwidmFyIGlkID0gMDtcbnZhciBwb3N0Zml4ID0gTWF0aC5yYW5kb20oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcgKyBTdHJpbmcoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSkgKyAnKV8nICsgKCsraWQgKyBwb3N0Zml4KS50b1N0cmluZygzNik7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2xlbmd0aFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGFyZ3VtZW50ID4gMCA/IG1pbih0b0ludGVnZXIoYXJndW1lbnQpLCAweDFGRkZGRkZGRkZGRkZGKSA6IDA7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBUb0ludGVnZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbnRlZ2VyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gaXNOYU4oYXJndW1lbnQgPSArYXJndW1lbnQpID8gMCA6IChhcmd1bWVudCA+IDAgPyBmbG9vciA6IGNlaWwpKGFyZ3VtZW50KTtcbn07XG4iLCIvLyBJRTgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gW1xuICAnY29uc3RydWN0b3InLFxuICAnaGFzT3duUHJvcGVydHknLFxuICAnaXNQcm90b3R5cGVPZicsXG4gICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICd0b0xvY2FsZVN0cmluZycsXG4gICd0b1N0cmluZycsXG4gICd2YWx1ZU9mJ1xuXTtcbiIsInZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgVG9PYmplY3RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9vYmplY3Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudCkpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcblxudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gIHZhciBsZW5ndGggPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIHNjcmlwdCA9ICdzY3JpcHQnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBqcyA9ICdqYXZhJyArIHNjcmlwdCArICc6JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgaHRtbC5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gU3RyaW5nKGpzKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArIHNjcmlwdCArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy8nICsgc2NyaXB0ICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGxlbmd0aC0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2xlbmd0aF1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxuLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG5cbmhpZGRlbktleXNbSUVfUFJPVE9dID0gdHJ1ZTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xuXG4vLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQpO1xuICAgIH07XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIG5hdGl2ZU9iamVjdENyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd3JhcHBlZC13ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xuXG52YXIgSElEREVOID0gc2hhcmVkS2V5KCdoaWRkZW4nKTtcbnZhciBTWU1CT0wgPSAnU3ltYm9sJztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBUT19QUklNSVRJVkUgPSB3ZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTWU1CT0wpO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBuYXRpdmVKU09OU3RyaW5naWZ5ID0gSlNPTiAmJiBKU09OLnN0cmluZ2lmeTtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyA9IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbC5mO1xudmFyIG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlID0gcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZjtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG90eXBlU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N0cmluZy10by1zeW1ib2wtcmVnaXN0cnknKTtcbnZhciBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtdG8tc3RyaW5nLXJlZ2lzdHJ5Jyk7XG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBVU0VfU0VUVEVSID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzY3JpcHRvciA9IERFU0NSSVBUT1JTICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdENyZWF0ZShuYXRpdmVEZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoTywgUCwgQXR0cmlidXRlcykge1xuICB2YXIgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIFApO1xuICBpZiAoT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvcikgZGVsZXRlIE9iamVjdFByb3RvdHlwZVtQXTtcbiAgbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yICYmIE8gIT09IE9iamVjdFByb3RvdHlwZSkge1xuICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KE9iamVjdFByb3RvdHlwZSwgUCwgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvcik7XG4gIH1cbn0gOiBuYXRpdmVEZWZpbmVQcm9wZXJ0eTtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnLCBkZXNjcmlwdGlvbikge1xuICB2YXIgc3ltYm9sID0gQWxsU3ltYm9sc1t0YWddID0gbmF0aXZlT2JqZWN0Q3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHNldEludGVybmFsU3RhdGUoc3ltYm9sLCB7XG4gICAgdHlwZTogU1lNQk9MLFxuICAgIHRhZzogdGFnLFxuICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvblxuICB9KTtcbiAgaWYgKCFERVNDUklQVE9SUykgc3ltYm9sLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gIHJldHVybiBzeW1ib2w7XG59O1xuXG52YXIgaXNTeW1ib2wgPSBOQVRJVkVfU1lNQk9MICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoaXQpIGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGlmIChPID09PSBPYmplY3RQcm90b3R5cGUpICRkZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQLCBBdHRyaWJ1dGVzKTtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghQXR0cmlidXRlcy5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhPLCBISURERU4pKSBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBISURERU4sIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB7fSkpO1xuICAgICAgT1tISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKE8sIEhJRERFTikgJiYgT1tISURERU5dW2tleV0pIE9bSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBBdHRyaWJ1dGVzID0gbmF0aXZlT2JqZWN0Q3JlYXRlKEF0dHJpYnV0ZXMsIHsgZW51bWVyYWJsZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjcmlwdG9yKE8sIGtleSwgQXR0cmlidXRlcyk7XG4gIH0gcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIGtleSwgQXR0cmlidXRlcyk7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBwcm9wZXJ0aWVzID0gdG9JbmRleGVkT2JqZWN0KFByb3BlcnRpZXMpO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMocHJvcGVydGllcykuY29uY2F0KCRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMocHJvcGVydGllcykpO1xuICAkZm9yRWFjaChrZXlzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFERVNDUklQVE9SUyB8fCAkcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChwcm9wZXJ0aWVzLCBrZXkpKSAkZGVmaW5lUHJvcGVydHkoTywga2V5LCBwcm9wZXJ0aWVzW2tleV0pO1xuICB9KTtcbiAgcmV0dXJuIE87XG59O1xuXG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyBuYXRpdmVPYmplY3RDcmVhdGUoTykgOiAkZGVmaW5lUHJvcGVydGllcyhuYXRpdmVPYmplY3RDcmVhdGUoTyksIFByb3BlcnRpZXMpO1xufTtcblxudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIFAgPSB0b1ByaW1pdGl2ZShWLCB0cnVlKTtcbiAgdmFyIGVudW1lcmFibGUgPSBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHRoaXMsIFApO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhcyhBbGxTeW1ib2xzLCBQKSAmJiAhaGFzKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFApKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBlbnVtZXJhYmxlIHx8ICFoYXModGhpcywgUCkgfHwgIWhhcyhBbGxTeW1ib2xzLCBQKSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1bUF0gPyBlbnVtZXJhYmxlIDogdHJ1ZTtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgdmFyIGl0ID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT2JqZWN0UHJvdG90eXBlU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgZGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KTtcbiAgaWYgKGRlc2NyaXB0b3IgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkge1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGRlc2NyaXB0b3I7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoTykpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gICRmb3JFYWNoKG5hbWVzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKGhpZGRlbktleXMsIGtleSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTykge1xuICB2YXIgSVNfT0JKRUNUX1BST1RPVFlQRSA9IE8gPT09IE9iamVjdFByb3RvdHlwZTtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyhJU19PQkpFQ1RfUFJPVE9UWVBFID8gT2JqZWN0UHJvdG90eXBlU3ltYm9scyA6IHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgKCFJU19PQkpFQ1RfUFJPVE9UWVBFIHx8IGhhcyhPYmplY3RQcm90b3R5cGUsIGtleSkpKSB7XG4gICAgICByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyBgU3ltYm9sYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLWNvbnN0cnVjdG9yXG5pZiAoIU5BVElWRV9TWU1CT0wpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yJyk7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gIWFyZ3VtZW50cy5sZW5ndGggfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBTdHJpbmcoYXJndW1lbnRzWzBdKTtcbiAgICB2YXIgdGFnID0gdWlkKGRlc2NyaXB0aW9uKTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlKSBzZXR0ZXIuY2FsbChPYmplY3RQcm90b3R5cGVTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2NyaXB0b3IodGhpcywgdGFnLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBVU0VfU0VUVEVSKSBzZXRTeW1ib2xEZXNjcmlwdG9yKE9iamVjdFByb3RvdHlwZSwgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiBzZXR0ZXIgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnLCBkZXNjcmlwdGlvbik7XG4gIH07XG5cbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS50YWc7XG4gIH0pO1xuXG4gIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLVN5bWJvbC1kZXNjcmlwdGlvblxuICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KCRTeW1ib2xbUFJPVE9UWVBFXSwgJ2Rlc2NyaXB0aW9uJywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykuZGVzY3JpcHRpb247XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFJU19QVVJFKSB7XG4gICAgICByZWRlZmluZShPYmplY3RQcm90b3R5cGUsICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgeyB1bnNhZmU6IHRydWUgfSk7XG4gICAgfVxuICB9XG5cbiAgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3ZWxsS25vd25TeW1ib2wobmFtZSksIG5hbWUpO1xuICB9O1xufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIFN5bWJvbDogJFN5bWJvbFxufSk7XG5cbiRmb3JFYWNoKG9iamVjdEtleXMoV2VsbEtub3duU3ltYm9sc1N0b3JlKSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVmaW5lV2VsbEtub3duU3ltYm9sKG5hbWUpO1xufSk7XG5cbiQoeyB0YXJnZXQ6IFNZTUJPTCwgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIC8vIGBTeW1ib2wuZm9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLmZvclxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBzdHJpbmcgPSBTdHJpbmcoa2V5KTtcbiAgICBpZiAoaGFzKFN0cmluZ1RvU3ltYm9sUmVnaXN0cnksIHN0cmluZykpIHJldHVybiBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5W3N0cmluZ107XG4gICAgdmFyIHN5bWJvbCA9ICRTeW1ib2woc3RyaW5nKTtcbiAgICBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5W3N0cmluZ10gPSBzeW1ib2w7XG4gICAgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeVtzeW1ib2xdID0gc3RyaW5nO1xuICAgIHJldHVybiBzeW1ib2w7XG4gIH0sXG4gIC8vIGBTeW1ib2wua2V5Rm9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLmtleWZvclxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCcpO1xuICAgIGlmIChoYXMoU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSwgc3ltKSkgcmV0dXJuIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltXTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgVVNFX1NFVFRFUiA9IGZhbHNlOyB9XG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIC8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlzeW1ib2xzXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IGZhaWxzKGZ1bmN0aW9uICgpIHsgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYoMSk7IH0pIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbi8vIGBKU09OLnN0cmluZ2lmeWAgbWV0aG9kIGJlaGF2aW9yIHdpdGggc3ltYm9sc1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtanNvbi5zdHJpbmdpZnlcbkpTT04gJiYgJCh7IHRhcmdldDogJ0pTT04nLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN5bWJvbCA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgcmV0dXJuIG5hdGl2ZUpTT05TdHJpbmdpZnkoW3N5bWJvbF0pICE9ICdbbnVsbF0nXG4gICAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gICAgfHwgbmF0aXZlSlNPTlN0cmluZ2lmeSh7IGE6IHN5bWJvbCB9KSAhPSAne30nXG4gICAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgICB8fCBuYXRpdmVKU09OU3RyaW5naWZ5KE9iamVjdChzeW1ib2wpKSAhPSAne30nO1xufSkgfSwge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaW5kZXggPSAxO1xuICAgIHZhciByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaW5kZXgpIGFyZ3MucHVzaChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIG5hdGl2ZUpTT05TdHJpbmdpZnkuYXBwbHkoSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9wcmltaXRpdmVcbmlmICghJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0pIGhpZGUoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCBTWU1CT0wpO1xuXG5oaWRkZW5LZXlzW0hJRERFTl0gPSB0cnVlO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gTmFzaG9ybiB+IEpESzggYnVnXG52YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgIW5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoeyAxOiAyIH0sIDEpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6IG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG52YXIgc3BsaXQgPSAnJy5zcGxpdDtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3Ncbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgcmV0dXJuICFPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbn0pID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjbGFzc29mKGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0LmNhbGwoaXQsICcnKSA6IE9iamVjdChpdCk7XG59IDogT2JqZWN0O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3JlYXRlRWxlbWVudCgnZGl2JyksICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfVxuICB9KS5hICE9IDc7XG59KTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhcmVkKCduYXRpdmUtZnVuY3Rpb24tdG8tc3RyaW5nJywgRnVuY3Rpb24udG9TdHJpbmcpO1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG4gIHZhciBrZXlzID0gb3duS2V5cyhzb3VyY2UpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmICghaGFzKHRhcmdldCwga2V5KSkgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICB9XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pICFoYXMoaGlkZGVuS2V5cywga2V5KSAmJiBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciByZXBsYWNlbWVudCA9IC8jfFxcLnByb3RvdHlwZVxcLi87XG5cbnZhciBpc0ZvcmNlZCA9IGZ1bmN0aW9uIChmZWF0dXJlLCBkZXRlY3Rpb24pIHtcbiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogdHlwZW9mIGRldGVjdGlvbiA9PSAnZnVuY3Rpb24nID8gZmFpbHMoZGV0ZWN0aW9uKVxuICAgIDogISFkZXRlY3Rpb247XG59O1xuXG52YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG52YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nO1xudmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHJldHVybiAhU3RyaW5nKFN5bWJvbCgpKTtcbn0pO1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxuLy8gYElzQXJyYXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXNhcnJheVxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjbGFzc29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ2RvY3VtZW50JywgJ2RvY3VtZW50RWxlbWVudCcpO1xuIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG4iLCJ2YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd3JhcHBlZC13ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FKSB7XG4gIHZhciBTeW1ib2wgPSBwYXRoLlN5bWJvbCB8fCAocGF0aC5TeW1ib2wgPSB7fSk7XG4gIGlmICghaGFzKFN5bWJvbCwgTkFNRSkpIGRlZmluZVByb3BlcnR5KFN5bWJvbCwgTkFNRSwge1xuICAgIHZhbHVlOiB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYoTkFNRSlcbiAgfSk7XG59O1xuIiwiLy8gYFN5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb25gIGdldHRlclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS5kZXNjcmlwdGlvblxuJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG5cbnZhciBOYXRpdmVTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xuXG5pZiAoREVTQ1JJUFRPUlMgJiYgdHlwZW9mIE5hdGl2ZVN5bWJvbCA9PSAnZnVuY3Rpb24nICYmICghKCdkZXNjcmlwdGlvbicgaW4gTmF0aXZlU3ltYm9sLnByb3RvdHlwZSkgfHxcbiAgLy8gU2FmYXJpIDEyIGJ1Z1xuICBOYXRpdmVTeW1ib2woKS5kZXNjcmlwdGlvbiAhPT0gdW5kZWZpbmVkXG4pKSB7XG4gIHZhciBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUgPSB7fTtcbiAgLy8gd3JhcCBTeW1ib2wgY29uc3RydWN0b3IgZm9yIGNvcnJlY3Qgd29yayB3aXRoIHVuZGVmaW5lZCBkZXNjcmlwdGlvblxuICB2YXIgU3ltYm9sV3JhcHBlciA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoIDwgMSB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IFN0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciByZXN1bHQgPSB0aGlzIGluc3RhbmNlb2YgU3ltYm9sV3JhcHBlclxuICAgICAgPyBuZXcgTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKVxuICAgICAgLy8gaW4gRWRnZSAxMywgU3RyaW5nKFN5bWJvbCh1bmRlZmluZWQpKSA9PT0gJ1N5bWJvbCh1bmRlZmluZWQpJ1xuICAgICAgOiBkZXNjcmlwdGlvbiA9PT0gdW5kZWZpbmVkID8gTmF0aXZlU3ltYm9sKCkgOiBOYXRpdmVTeW1ib2woZGVzY3JpcHRpb24pO1xuICAgIGlmIChkZXNjcmlwdGlvbiA9PT0gJycpIEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZVtyZXN1bHRdID0gdHJ1ZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKFN5bWJvbFdyYXBwZXIsIE5hdGl2ZVN5bWJvbCk7XG4gIHZhciBzeW1ib2xQcm90b3R5cGUgPSBTeW1ib2xXcmFwcGVyLnByb3RvdHlwZSA9IE5hdGl2ZVN5bWJvbC5wcm90b3R5cGU7XG4gIHN5bWJvbFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN5bWJvbFdyYXBwZXI7XG5cbiAgdmFyIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG90eXBlLnRvU3RyaW5nO1xuICB2YXIgbmF0aXZlID0gU3RyaW5nKE5hdGl2ZVN5bWJvbCgndGVzdCcpKSA9PSAnU3ltYm9sKHRlc3QpJztcbiAgdmFyIHJlZ2V4cCA9IC9eU3ltYm9sXFwoKC4qKVxcKVteKV0rJC87XG4gIGRlZmluZVByb3BlcnR5KHN5bWJvbFByb3RvdHlwZSwgJ2Rlc2NyaXB0aW9uJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgICAgdmFyIHN5bWJvbCA9IGlzT2JqZWN0KHRoaXMpID8gdGhpcy52YWx1ZU9mKCkgOiB0aGlzO1xuICAgICAgdmFyIHN0cmluZyA9IHN5bWJvbFRvU3RyaW5nLmNhbGwoc3ltYm9sKTtcbiAgICAgIGlmIChoYXMoRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlLCBzeW1ib2wpKSByZXR1cm4gJyc7XG4gICAgICB2YXIgZGVzYyA9IG5hdGl2ZSA/IHN0cmluZy5zbGljZSg3LCAtMSkgOiBzdHJpbmcucmVwbGFjZShyZWdleHAsICckMScpO1xuICAgICAgcmV0dXJuIGRlc2MgPT09ICcnID8gdW5kZWZpbmVkIDogZGVzYztcbiAgICB9XG4gIH0pO1xuXG4gICQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgU3ltYm9sOiBTeW1ib2xXcmFwcGVyXG4gIH0pO1xufVxuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZycpO1xuXG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKHRvU3RyaW5nICE9PSBPYmplY3RQcm90b3R5cGUudG9TdHJpbmcpIHtcbiAgcmVkZWZpbmUoT2JqZWN0UHJvdG90eXBlLCAndG9TdHJpbmcnLCB0b1N0cmluZywgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCJ2YXIgY2xhc3NvZlJhdyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG4vLyBnZXR0aW5nIHRhZyBmcm9tIEVTNisgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgdGFnLCByZXN1bHQ7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mICh0YWcgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRPX1NUUklOR19UQUcpKSA9PSAnc3RyaW5nJyA/IHRhZ1xuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQ09SUkVDVF9BUkdVTUVOVFMgPyBjbGFzc29mUmF3KE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKHJlc3VsdCA9IGNsYXNzb2ZSYXcoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiByZXN1bHQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2JpbmQtY29udGV4dCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcblxudmFyIGxvY2F0aW9uID0gZ2xvYmFsLmxvY2F0aW9uO1xudmFyIHNldCA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXIgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG5cbnZhciBydW4gPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcblxudmFyIHJ1bm5lciA9IGZ1bmN0aW9uIChpZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJ1bihpZCk7XG4gIH07XG59O1xuXG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuKGV2ZW50LmRhdGEpO1xufTtcblxudmFyIHBvc3QgPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gb2xkIGVuZ2luZXMgaGF2ZSBub3QgbG9jYXRpb24ub3JpZ2luXG4gIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0KTtcbn07XG5cbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0IHx8ICFjbGVhcikge1xuICBzZXQgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbikpLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXIgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAoY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KHJ1bm5lcihpZCkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCkge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gYmluZChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzICYmICFmYWlscyhwb3N0KSkge1xuICAgIGRlZmVyID0gcG9zdDtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChydW5uZXIoaWQpLCAwKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgY2xlYXI6IGNsZWFyXG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignbmF2aWdhdG9yJywgJ3VzZXJBZ2VudCcpIHx8ICcnO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG5cbnZhciBQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59O1xuXG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5lbnRyaWVzXG4vLyBgQXJyYXkucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmtleXNcbi8vIGBBcnJheS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAaXRlcmF0b3Jcbi8vIGBDcmVhdGVBcnJheUl0ZXJhdG9yYCBpbnRlcm5hbCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZWFycmF5aXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lSXRlcmF0b3IoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBBUlJBWV9JVEVSQVRPUixcbiAgICB0YXJnZXQ6IHRvSW5kZXhlZE9iamVjdChpdGVyYXRlZCksIC8vIHRhcmdldFxuICAgIGluZGV4OiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICAgIGtpbmQ6IGtpbmQgICAgICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICB9KTtcbi8vIGAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7XG4gIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHsgdmFsdWU6IGluZGV4LCBkb25lOiBmYWxzZSB9O1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IHRhcmdldFtpbmRleF0sIGRvbmU6IGZhbHNlIH07XG4gIHJldHVybiB7IHZhbHVlOiBbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBkb25lOiBmYWxzZSB9O1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyVcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZXVubWFwcGVkYXJndW1lbnRzb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1jcmVhdGVtYXBwZWRhcmd1bWVudHNvYmplY3Rcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgSXRlcmF0b3JzQ29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpO1xuXG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSBJdGVyYXRvcnNDb3JlLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBJdGVyYXRvcnNDb3JlLkJVR0dZX1NBRkFSSV9JVEVSQVRPUlM7XG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcbnZhciBFTlRSSUVTID0gJ2VudHJpZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhYmxlLCBOQU1FLCBJdGVyYXRvckNvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuXG4gIHZhciBnZXRJdGVyYXRpb25NZXRob2QgPSBmdW5jdGlvbiAoS0lORCkge1xuICAgIGlmIChLSU5EID09PSBERUZBVUxUICYmIGRlZmF1bHRJdGVyYXRvcikgcmV0dXJuIGRlZmF1bHRJdGVyYXRvcjtcbiAgICBpZiAoIUJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgJiYgS0lORCBpbiBJdGVyYWJsZVByb3RvdHlwZSkgcmV0dXJuIEl0ZXJhYmxlUHJvdG90eXBlW0tJTkRdO1xuICAgIHN3aXRjaCAoS0lORCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgRU5UUklFUzogcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzKTsgfTtcbiAgfTtcblxuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IGZhbHNlO1xuICB2YXIgSXRlcmFibGVQcm90b3R5cGUgPSBJdGVyYWJsZS5wcm90b3R5cGU7XG4gIHZhciBuYXRpdmVJdGVyYXRvciA9IEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXVxuICAgIHx8IEl0ZXJhYmxlUHJvdG90eXBlWydAQGl0ZXJhdG9yJ11cbiAgICB8fCBERUZBVUxUICYmIEl0ZXJhYmxlUHJvdG90eXBlW0RFRkFVTFRdO1xuICB2YXIgZGVmYXVsdEl0ZXJhdG9yID0gIUJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgJiYgbmF0aXZlSXRlcmF0b3IgfHwgZ2V0SXRlcmF0aW9uTWV0aG9kKERFRkFVTFQpO1xuICB2YXIgYW55TmF0aXZlSXRlcmF0b3IgPSBOQU1FID09ICdBcnJheScgPyBJdGVyYWJsZVByb3RvdHlwZS5lbnRyaWVzIHx8IG5hdGl2ZUl0ZXJhdG9yIDogbmF0aXZlSXRlcmF0b3I7XG4gIHZhciBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIG1ldGhvZHMsIEtFWTtcblxuICAvLyBmaXggbmF0aXZlXG4gIGlmIChhbnlOYXRpdmVJdGVyYXRvcikge1xuICAgIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGFueU5hdGl2ZUl0ZXJhdG9yLmNhbGwobmV3IEl0ZXJhYmxlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIGlmICghSVNfUFVSRSAmJiBnZXRQcm90b3R5cGVPZihDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUpICE9PSBJdGVyYXRvclByb3RvdHlwZSkge1xuICAgICAgICBpZiAoc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgICAgICBzZXRQcm90b3R5cGVPZihDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgaGlkZShDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCB0cnVlLCB0cnVlKTtcbiAgICAgIGlmIChJU19QVVJFKSBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICAgIH1cbiAgfVxuXG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRkFVTFQgPT0gVkFMVUVTICYmIG5hdGl2ZUl0ZXJhdG9yICYmIG5hdGl2ZUl0ZXJhdG9yLm5hbWUgIT09IFZBTFVFUykge1xuICAgIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IHRydWU7XG4gICAgZGVmYXVsdEl0ZXJhdG9yID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmF0aXZlSXRlcmF0b3IuY2FsbCh0aGlzKTsgfTtcbiAgfVxuXG4gIC8vIGRlZmluZSBpdGVyYXRvclxuICBpZiAoKCFJU19QVVJFIHx8IEZPUkNFRCkgJiYgSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdICE9PSBkZWZhdWx0SXRlcmF0b3IpIHtcbiAgICBoaWRlKEl0ZXJhYmxlUHJvdG90eXBlLCBJVEVSQVRPUiwgZGVmYXVsdEl0ZXJhdG9yKTtcbiAgfVxuICBJdGVyYXRvcnNbTkFNRV0gPSBkZWZhdWx0SXRlcmF0b3I7XG5cbiAgLy8gZXhwb3J0IGFkZGl0aW9uYWwgbWV0aG9kc1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gZGVmYXVsdEl0ZXJhdG9yIDogZ2V0SXRlcmF0aW9uTWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogZ2V0SXRlcmF0aW9uTWV0aG9kKEVOVFJJRVMpXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKEtFWSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfHwgIShLRVkgaW4gSXRlcmFibGVQcm90b3R5cGUpKSB7XG4gICAgICAgIHJlZGVmaW5lKEl0ZXJhYmxlUHJvdG90eXBlLCBLRVksIG1ldGhvZHNbS0VZXSk7XG4gICAgICB9XG4gICAgfSBlbHNlICQoeyB0YXJnZXQ6IE5BTUUsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIH0sIG1ldGhvZHMpO1xuICB9XG5cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IGZhbHNlO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlYCBvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSVpdGVyYXRvcnByb3RvdHlwZSUtb2JqZWN0XG52YXIgSXRlcmF0b3JQcm90b3R5cGUsIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSwgYXJyYXlJdGVyYXRvcjtcblxuaWYgKFtdLmtleXMpIHtcbiAgYXJyYXlJdGVyYXRvciA9IFtdLmtleXMoKTtcbiAgLy8gU2FmYXJpIDggaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gIGlmICghKCduZXh0JyBpbiBhcnJheUl0ZXJhdG9yKSkgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IHRydWU7XG4gIGVsc2Uge1xuICAgIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGdldFByb3RvdHlwZU9mKGFycmF5SXRlcmF0b3IpKTtcbiAgICBpZiAoUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKSBJdGVyYXRvclByb3RvdHlwZSA9IFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxufVxuXG5pZiAoSXRlcmF0b3JQcm90b3R5cGUgPT0gdW5kZWZpbmVkKSBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxuaWYgKCFJU19QVVJFICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSkgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgSXRlcmF0b3JQcm90b3R5cGU6IEl0ZXJhdG9yUHJvdG90eXBlLFxuICBCVUdHWV9TQUZBUklfSVRFUkFUT1JTOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTXG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8vIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldHByb3RvdHlwZW9mXG5tb2R1bGUuZXhwb3J0cyA9IENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90b3R5cGUgOiBudWxsO1xufTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgbmF0aXZlRnVuY3Rpb25Ub1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi10by1zdHJpbmcnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QobmF0aXZlRnVuY3Rpb25Ub1N0cmluZy5jYWxsKFdlYWtNYXApKTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgaWYgKChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSAmJiBPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4gIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGxlbmd0aCwgbGVuZ3RoKS5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgdmFyIGludGVnZXIgPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihPLCBrZXkgPSBrZXlzW2luZGV4KytdLCBQcm9wZXJ0aWVzW2tleV0pO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG5cbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMoaXQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XSdcbiAgICA/IGdldFdpbmRvd05hbWVzKGl0KVxuICAgIDogbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoaXQpKTtcbn07XG4iLCJ2YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9iaW5kLWNvbnRleHQnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbnZhciBwdXNoID0gW10ucHVzaDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGZvckVhY2gsIG1hcCwgZmlsdGVyLCBzb21lLCBldmVyeSwgZmluZCwgZmluZEluZGV4IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoVFlQRSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQsIHNwZWNpZmljQ3JlYXRlKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNyZWF0ZSA9IHNwZWNpZmljQ3JlYXRlIHx8IGFycmF5U3BlY2llc0NyZWF0ZTtcbiAgICB2YXIgdGFyZ2V0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsdWUsIHJlc3VsdDtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbHVlID0gc2VsZltpbmRleF07XG4gICAgICByZXN1bHQgPSBib3VuZEZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSB0YXJnZXRbaW5kZXhdID0gcmVzdWx0OyAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzdWx0KSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbHVlOyAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcHVzaC5jYWxsKHRhcmdldCwgdmFsdWUpOyAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHRhcmdldDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuICBmb3JFYWNoOiBjcmVhdGVNZXRob2QoMCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuICBtYXA6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4gIGZpbHRlcjogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc29tZVxuICBzb21lOiBjcmVhdGVNZXRob2QoMyksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZXZlcnlcbiAgZXZlcnk6IGNyZWF0ZU1ldGhvZCg0KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiAgZmluZDogY3JlYXRlTWV0aG9kKDUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhcbiAgZmluZEluZGV4OiBjcmVhdGVNZXRob2QoNilcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG4vLyBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5c3BlY2llc2NyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSwgbGVuZ3RoKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbEFycmF5KSkge1xuICAgIEMgPSBvcmlnaW5hbEFycmF5LmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBlbHNlIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIG5ldyAoQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDKShsZW5ndGggPT09IDAgPyAwIDogbGVuZ3RoKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIHRlc3QgPSB7fTtcblxudGVzdFtUT19TVFJJTkdfVEFHXSA9ICd6JztcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBTdHJpbmcodGVzdCkgIT09ICdbb2JqZWN0IHpdJyA/IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG59IDogdGVzdC50b1N0cmluZztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBOYXRpdmVQcm9taXNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1wcm9taXNlLWNvbnN0cnVjdG9yJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90YXNrJykuc2V0O1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9taWNyb3Rhc2snKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLXJlc29sdmUnKTtcbnZhciBob3N0UmVwb3J0RXJyb3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hvc3QtcmVwb3J0LWVycm9ycycpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BlcmZvcm0nKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlci1hZ2VudCcpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihQUk9NSVNFKTtcbnZhciBQcm9taXNlQ29uc3RydWN0b3IgPSBOYXRpdmVQcm9taXNlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyICRmZXRjaCA9IGdsb2JhbC5mZXRjaDtcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucztcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4IHx8ICcnO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcbnZhciBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eTtcbnZhciBJU19OT0RFID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG52YXIgRElTUEFUQ0hfRVZFTlQgPSAhIShkb2N1bWVudCAmJiBkb2N1bWVudC5jcmVhdGVFdmVudCAmJiBnbG9iYWwuZGlzcGF0Y2hFdmVudCk7XG52YXIgVU5IQU5ETEVEX1JFSkVDVElPTiA9ICd1bmhhbmRsZWRyZWplY3Rpb24nO1xudmFyIFJFSkVDVElPTl9IQU5ETEVEID0gJ3JlamVjdGlvbmhhbmRsZWQnO1xudmFyIFBFTkRJTkcgPSAwO1xudmFyIEZVTEZJTExFRCA9IDE7XG52YXIgUkVKRUNURUQgPSAyO1xudmFyIEhBTkRMRUQgPSAxO1xudmFyIFVOSEFORExFRCA9IDI7XG52YXIgSW50ZXJuYWwsIE93blByb21pc2VDYXBhYmlsaXR5LCBQcm9taXNlV3JhcHBlciwgbmF0aXZlVGhlbjtcblxudmFyIEZPUkNFRCA9IGlzRm9yY2VkKFBST01JU0UsIGZ1bmN0aW9uICgpIHtcbiAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZUNvbnN0cnVjdG9yLnJlc29sdmUoMSk7XG4gIHZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbU1BFQ0lFU10gPSBmdW5jdGlvbiAoZXhlYykge1xuICAgIGV4ZWMoZW1wdHksIGVtcHR5KTtcbiAgfTtcbiAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICByZXR1cm4gISgoSVNfTk9ERSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpXG4gICAgJiYgKCFJU19QVVJFIHx8IHByb21pc2VbJ2ZpbmFsbHknXSlcbiAgICAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2VcbiAgICAvLyB2OCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgLy8gd2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICAmJiB2OC5pbmRleE9mKCc2LjYnKSAhPT0gMFxuICAgICYmIHVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUvNjYnKSA9PT0gLTEpO1xufSk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gRk9SQ0VEIHx8ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIFByb21pc2VDb25zdHJ1Y3Rvci5hbGwoaXRlcmFibGUpWydjYXRjaCddKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG5cbnZhciBub3RpZnkgPSBmdW5jdGlvbiAocHJvbWlzZSwgc3RhdGUsIGlzUmVqZWN0KSB7XG4gIGlmIChzdGF0ZS5ub3RpZmllZCkgcmV0dXJuO1xuICBzdGF0ZS5ub3RpZmllZCA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHN0YXRlLnJlYWN0aW9ucztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgb2sgPSBzdGF0ZS5zdGF0ZSA9PSBGVUxGSUxMRUQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gY2hhaW5baW5kZXgrK107XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5yZWplY3Rpb24gPT09IFVOSEFORExFRCkgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSwgc3RhdGUpO1xuICAgICAgICAgICAgc3RhdGUucmVqZWN0aW9uID0gSEFORExFRDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gY2FuIHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgICBzdGF0ZS5yZWFjdGlvbnMgPSBbXTtcbiAgICBzdGF0ZS5ub3RpZmllZCA9IGZhbHNlO1xuICAgIGlmIChpc1JlamVjdCAmJiAhc3RhdGUucmVqZWN0aW9uKSBvblVuaGFuZGxlZChwcm9taXNlLCBzdGF0ZSk7XG4gIH0pO1xufTtcblxudmFyIGRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbiAobmFtZSwgcHJvbWlzZSwgcmVhc29uKSB7XG4gIHZhciBldmVudCwgaGFuZGxlcjtcbiAgaWYgKERJU1BBVENIX0VWRU5UKSB7XG4gICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBldmVudC5wcm9taXNlID0gcHJvbWlzZTtcbiAgICBldmVudC5yZWFzb24gPSByZWFzb247XG4gICAgZXZlbnQuaW5pdEV2ZW50KG5hbWUsIGZhbHNlLCB0cnVlKTtcbiAgICBnbG9iYWwuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gIH0gZWxzZSBldmVudCA9IHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiByZWFzb24gfTtcbiAgaWYgKGhhbmRsZXIgPSBnbG9iYWxbJ29uJyArIG5hbWVdKSBoYW5kbGVyKGV2ZW50KTtcbiAgZWxzZSBpZiAobmFtZSA9PT0gVU5IQU5ETEVEX1JFSkVDVElPTikgaG9zdFJlcG9ydEVycm9ycygnVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgcmVhc29uKTtcbn07XG5cbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gc3RhdGUudmFsdWU7XG4gICAgdmFyIElTX1VOSEFORExFRCA9IGlzVW5oYW5kbGVkKHN0YXRlKTtcbiAgICB2YXIgcmVzdWx0O1xuICAgIGlmIChJU19VTkhBTkRMRUQpIHtcbiAgICAgIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoSVNfTk9ERSkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgZGlzcGF0Y2hFdmVudChVTkhBTkRMRURfUkVKRUNUSU9OLCBwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBzdGF0ZS5yZWplY3Rpb24gPSBJU19OT0RFIHx8IGlzVW5oYW5kbGVkKHN0YXRlKSA/IFVOSEFORExFRCA6IEhBTkRMRUQ7XG4gICAgICBpZiAocmVzdWx0LmVycm9yKSB0aHJvdyByZXN1bHQudmFsdWU7XG4gICAgfVxuICB9KTtcbn07XG5cbnZhciBpc1VuaGFuZGxlZCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUucmVqZWN0aW9uICE9PSBIQU5ETEVEICYmICFzdGF0ZS5wYXJlbnQ7XG59O1xuXG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSwgc3RhdGUpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIGlmIChJU19OT0RFKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgZGlzcGF0Y2hFdmVudChSRUpFQ1RJT05fSEFORExFRCwgcHJvbWlzZSwgc3RhdGUudmFsdWUpO1xuICB9KTtcbn07XG5cbnZhciBiaW5kID0gZnVuY3Rpb24gKGZuLCBwcm9taXNlLCBzdGF0ZSwgdW53cmFwKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBmbihwcm9taXNlLCBzdGF0ZSwgdmFsdWUsIHVud3JhcCk7XG4gIH07XG59O1xuXG52YXIgaW50ZXJuYWxSZWplY3QgPSBmdW5jdGlvbiAocHJvbWlzZSwgc3RhdGUsIHZhbHVlLCB1bndyYXApIHtcbiAgaWYgKHN0YXRlLmRvbmUpIHJldHVybjtcbiAgc3RhdGUuZG9uZSA9IHRydWU7XG4gIGlmICh1bndyYXApIHN0YXRlID0gdW53cmFwO1xuICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICBzdGF0ZS5zdGF0ZSA9IFJFSkVDVEVEO1xuICBub3RpZnkocHJvbWlzZSwgc3RhdGUsIHRydWUpO1xufTtcblxudmFyIGludGVybmFsUmVzb2x2ZSA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICB2YXIgdGhlbiA9IGlzVGhlbmFibGUodmFsdWUpO1xuICAgIGlmICh0aGVuKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVzb2x2ZSwgcHJvbWlzZSwgd3JhcHBlciwgc3RhdGUpLFxuICAgICAgICAgICAgYmluZChpbnRlcm5hbFJlamVjdCwgcHJvbWlzZSwgd3JhcHBlciwgc3RhdGUpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBpbnRlcm5hbFJlamVjdChwcm9taXNlLCB3cmFwcGVyLCBlcnJvciwgc3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHN0YXRlLnN0YXRlID0gRlVMRklMTEVEO1xuICAgICAgbm90aWZ5KHByb21pc2UsIHN0YXRlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGludGVybmFsUmVqZWN0KHByb21pc2UsIHsgZG9uZTogZmFsc2UgfSwgZXJyb3IsIHN0YXRlKTtcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmIChGT1JDRUQpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgUHJvbWlzZUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgUHJvbWlzZUNvbnN0cnVjdG9yLCBQUk9NSVNFKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoYmluZChpbnRlcm5hbFJlc29sdmUsIHRoaXMsIHN0YXRlKSwgYmluZChpbnRlcm5hbFJlamVjdCwgdGhpcywgc3RhdGUpKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaW50ZXJuYWxSZWplY3QodGhpcywgc3RhdGUsIGVycm9yKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICAgIHR5cGU6IFBST01JU0UsXG4gICAgICBkb25lOiBmYWxzZSxcbiAgICAgIG5vdGlmaWVkOiBmYWxzZSxcbiAgICAgIHBhcmVudDogZmFsc2UsXG4gICAgICByZWFjdGlvbnM6IFtdLFxuICAgICAgcmVqZWN0aW9uOiBmYWxzZSxcbiAgICAgIHN0YXRlOiBQRU5ESU5HLFxuICAgICAgdmFsdWU6IHVuZGVmaW5lZFxuICAgIH0pO1xuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZWRlZmluZUFsbChQcm9taXNlQ29uc3RydWN0b3IucHJvdG90eXBlLCB7XG4gICAgLy8gYFByb21pc2UucHJvdG90eXBlLnRoZW5gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLnRoZW5cbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSh0aGlzKTtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBQcm9taXNlQ29uc3RydWN0b3IpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gSVNfTk9ERSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgc3RhdGUucGFyZW50ID0gdHJ1ZTtcbiAgICAgIHN0YXRlLnJlYWN0aW9ucy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmIChzdGF0ZS5zdGF0ZSAhPSBQRU5ESU5HKSBub3RpZnkodGhpcywgc3RhdGUsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gYFByb21pc2UucHJvdG90eXBlLmNhdGNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS5jYXRjaFxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHByb21pc2UpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gYmluZChpbnRlcm5hbFJlc29sdmUsIHByb21pc2UsIHN0YXRlKTtcbiAgICB0aGlzLnJlamVjdCA9IGJpbmQoaW50ZXJuYWxSZWplY3QsIHByb21pc2UsIHN0YXRlKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gUHJvbWlzZUNvbnN0cnVjdG9yIHx8IEMgPT09IFByb21pc2VXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG5cbiAgaWYgKCFJU19QVVJFICYmIHR5cGVvZiBOYXRpdmVQcm9taXNlID09ICdmdW5jdGlvbicpIHtcbiAgICBuYXRpdmVUaGVuID0gTmF0aXZlUHJvbWlzZS5wcm90b3R5cGUudGhlbjtcblxuICAgIC8vIHdyYXAgbmF0aXZlIFByb21pc2UjdGhlbiBmb3IgbmF0aXZlIGFzeW5jIGZ1bmN0aW9uc1xuICAgIHJlZGVmaW5lKE5hdGl2ZVByb21pc2UucHJvdG90eXBlLCAndGhlbicsIGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZUNvbnN0cnVjdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgbmF0aXZlVGhlbi5jYWxsKHRoYXQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKTtcbiAgICB9KTtcblxuICAgIC8vIHdyYXAgZmV0Y2ggcmVzdWx0XG4gICAgaWYgKHR5cGVvZiAkZmV0Y2ggPT0gJ2Z1bmN0aW9uJykgJCh7IGdsb2JhbDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgZmV0Y2g6IGZ1bmN0aW9uIGZldGNoKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShQcm9taXNlQ29uc3RydWN0b3IsICRmZXRjaC5hcHBseShnbG9iYWwsIGFyZ3VtZW50cykpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbiQoeyBnbG9iYWw6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgUHJvbWlzZTogUHJvbWlzZUNvbnN0cnVjdG9yXG59KTtcblxuc2V0VG9TdHJpbmdUYWcoUHJvbWlzZUNvbnN0cnVjdG9yLCBQUk9NSVNFLCBmYWxzZSwgdHJ1ZSk7XG5zZXRTcGVjaWVzKFBST01JU0UpO1xuXG5Qcm9taXNlV3JhcHBlciA9IHBhdGhbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVqZWN0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5yZWplY3RcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgY2FwYWJpbGl0eS5yZWplY3QuY2FsbCh1bmRlZmluZWQsIHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfHwgRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVzb2x2ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucmVzb2x2ZVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoSVNfUFVSRSAmJiB0aGlzID09PSBQcm9taXNlV3JhcHBlciA/IFByb21pc2VDb25zdHJ1Y3RvciA6IHRoaXMsIHgpO1xuICB9XG59KTtcblxuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgLy8gYFByb21pc2UuYWxsYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5hbGxcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbihDLnJlc29sdmUpO1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICAkcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIGBQcm9taXNlLnJhY2VgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJhY2VcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHByb21pc2VSZXNvbHZlID0gYUZ1bmN0aW9uKEMucmVzb2x2ZSk7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICAkcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuUHJvbWlzZTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgb3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIG9wdGlvbnMpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUl9OQU1FKSB7XG4gIHZhciBDb25zdHJ1Y3RvciA9IGdldEJ1aWx0SW4oQ09OU1RSVUNUT1JfTkFNRSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmIENvbnN0cnVjdG9yICYmICFDb25zdHJ1Y3RvcltTUEVDSUVTXSkge1xuICAgIGRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBTUEVDSUVTLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgICB9KTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0ICcgKyAobmFtZSA/IG5hbWUgKyAnICcgOiAnJykgKyAnaW52b2NhdGlvbicpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYmluZC1jb250ZXh0Jyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcblxudmFyIFJlc3VsdCA9IGZ1bmN0aW9uIChzdG9wcGVkLCByZXN1bHQpIHtcbiAgdGhpcy5zdG9wcGVkID0gc3RvcHBlZDtcbiAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG59O1xuXG52YXIgaXRlcmF0ZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBmbiwgdGhhdCwgQVNfRU5UUklFUywgSVNfSVRFUkFUT1IpIHtcbiAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGZuLCB0aGF0LCBBU19FTlRSSUVTID8gMiA6IDEpO1xuICB2YXIgaXRlcmF0b3IsIGl0ZXJGbiwgaW5kZXgsIGxlbmd0aCwgcmVzdWx0LCBzdGVwO1xuXG4gIGlmIChJU19JVEVSQVRPUikge1xuICAgIGl0ZXJhdG9yID0gaXRlcmFibGU7XG4gIH0gZWxzZSB7XG4gICAgaXRlckZuID0gZ2V0SXRlcmF0b3JNZXRob2QoaXRlcmFibGUpO1xuICAgIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcignVGFyZ2V0IGlzIG5vdCBpdGVyYWJsZScpO1xuICAgIC8vIG9wdGltaXNhdGlvbiBmb3IgYXJyYXkgaXRlcmF0b3JzXG4gICAgaWYgKGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyRm4pKSB7XG4gICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgcmVzdWx0ID0gQVNfRU5UUklFU1xuICAgICAgICAgID8gYm91bmRGdW5jdGlvbihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSlcbiAgICAgICAgICA6IGJvdW5kRnVuY3Rpb24oaXRlcmFibGVbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQgaW5zdGFuY2VvZiBSZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gICAgICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbiAgICB9XG4gICAgaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7XG4gIH1cblxuICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgcmVzdWx0ID0gY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyhpdGVyYXRvciwgYm91bmRGdW5jdGlvbiwgc3RlcC52YWx1ZSwgQVNfRU5UUklFUyk7XG4gICAgaWYgKHJlc3VsdCAmJiByZXN1bHQgaW5zdGFuY2VvZiBSZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gIH0gcmV0dXJuIG5ldyBSZXN1bHQoZmFsc2UpO1xufTtcblxuaXRlcmF0ZS5zdG9wID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICByZXR1cm4gbmV3IFJlc3VsdCh0cnVlLCByZXN1bHQpO1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxuLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBFTlRSSUVTKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEVOVFJJRVMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB2YXIgcmV0dXJuTWV0aG9kID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXR1cm5NZXRob2QgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0dXJuTWV0aG9kLmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgY2FsbGVkID0gMDtcbiAgdmFyIGl0ZXJhdG9yV2l0aFJldHVybiA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBkb25lOiAhIWNhbGxlZCsrIH07XG4gICAgfSxcbiAgICAncmV0dXJuJzogZnVuY3Rpb24gKCkge1xuICAgICAgU0FGRV9DTE9TSU5HID0gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIGl0ZXJhdG9yV2l0aFJldHVybltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20oaXRlcmF0b3JXaXRoUmV0dXJuLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBTS0lQX0NMT1NJTkcpIHtcbiAgaWYgKCFTS0lQX0NMT1NJTkcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgSVRFUkFUSU9OX1NVUFBPUlQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgb2JqZWN0W0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4geyBkb25lOiBJVEVSQVRJT05fU1VQUE9SVCA9IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICAgIGV4ZWMob2JqZWN0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gSVRFUkFUSU9OX1NVUFBPUlQ7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBTcGVjaWVzQ29uc3RydWN0b3JgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3BlY2llc2NvbnN0cnVjdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBkZWZhdWx0Q29uc3RydWN0b3IpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gZGVmYXVsdENvbnN0cnVjdG9yIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlci1hZ2VudCcpO1xuXG52YXIgTXV0YXRpb25PYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgSVNfTk9ERSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuLy8gTm9kZS5qcyAxMSBzaG93cyBFeHBlcmltZW50YWxXYXJuaW5nIG9uIGdldHRpbmcgYHF1ZXVlTWljcm90YXNrYFxudmFyIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihnbG9iYWwsICdxdWV1ZU1pY3JvdGFzaycpO1xudmFyIHF1ZXVlTWljcm90YXNrID0gcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yICYmIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvci52YWx1ZTtcblxudmFyIGZsdXNoLCBoZWFkLCBsYXN0LCBub3RpZnksIHRvZ2dsZSwgbm9kZSwgcHJvbWlzZSwgdGhlbjtcblxuLy8gbW9kZXJuIGVuZ2luZXMgaGF2ZSBxdWV1ZU1pY3JvdGFzayBtZXRob2RcbmlmICghcXVldWVNaWNyb3Rhc2spIHtcbiAgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKElTX05PREUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKElTX05PREUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIH0gZWxzZSBpZiAoTXV0YXRpb25PYnNlcnZlciAmJiAhLyhpcGhvbmV8aXBvZHxpcGFkKS4qYXBwbGV3ZWJraXQvaS50ZXN0KHVzZXJBZ2VudCkpIHtcbiAgICB0b2dnbGUgPSB0cnVlO1xuICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIHRoZW4gPSBwcm9taXNlLnRoZW47XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhlbi5jYWxsKHByb21pc2UsIGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHF1ZXVlTWljcm90YXNrIHx8IGZ1bmN0aW9uIChmbikge1xuICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gIGlmICghaGVhZCkge1xuICAgIGhlYWQgPSB0YXNrO1xuICAgIG5vdGlmeSgpO1xuICB9IGxhc3QgPSB0YXNrO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHZhciBjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGU7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gY29uc29sZS5lcnJvcihhKSA6IGNvbnNvbGUuZXJyb3IoYSwgYik7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZXJyb3I6IGZhbHNlLCB2YWx1ZTogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHsgZXJyb3I6IHRydWUsIHZhbHVlOiBlcnJvciB9O1xuICB9XG59O1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5pdGVyYXRvcmAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5pdGVyYXRvclxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRlJyk7XG5cbnZhciBVTlNDT1BBQkxFUyA9IHdlbGxLbm93blN5bWJvbCgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxuLy8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuaWYgKEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHtcbiAgaGlkZShBcnJheVByb3RvdHlwZSwgVU5TQ09QQUJMRVMsIGNyZWF0ZShudWxsKSk7XG59XG5cbi8vIGFkZCBhIGtleSB0byBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJykuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICBJdGVyYXRvckNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yQ29uc3RydWN0b3IsIFRPX1NUUklOR19UQUcsIGZhbHNlLCB0cnVlKTtcbiAgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgcmV0dXJuIEl0ZXJhdG9yQ29uc3RydWN0b3I7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7XG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IEYoKSkgIT09IEYucHJvdG90eXBlO1xufSk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnNldHByb3RvdHlwZW9mXG4vLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyBmdW5jdGlvbiAoKSB7XG4gIHZhciBDT1JSRUNUX1NFVFRFUiA9IGZhbHNlO1xuICB2YXIgdGVzdCA9IHt9O1xuICB2YXIgc2V0dGVyO1xuICB0cnkge1xuICAgIHNldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldDtcbiAgICBzZXR0ZXIuY2FsbCh0ZXN0LCBbXSk7XG4gICAgQ09SUkVDVF9TRVRURVIgPSB0ZXN0IGluc3RhbmNlb2YgQXJyYXk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgYW5PYmplY3QoTyk7XG4gICAgYVBvc3NpYmxlUHJvdG90eXBlKHByb3RvKTtcbiAgICBpZiAoQ09SUkVDVF9TRVRURVIpIHNldHRlci5jYWxsKE8sIHByb3RvKTtcbiAgICBlbHNlIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgcmV0dXJuIE87XG4gIH07XG59KCkgOiB1bmRlZmluZWQpO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSAmJiBpdCAhPT0gbnVsbCkge1xuICAgIHRocm93IFR5cGVFcnJvcihcIkNhbid0IHNldCBcIiArIFN0cmluZyhpdCkgKyAnIGFzIGEgcHJvdG90eXBlJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjaGFyQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNoYXJBdDtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgZGVmaW5lSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yJyk7XG5cbnZhciBTVFJJTkdfSVRFUkFUT1IgPSAnU3RyaW5nIEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFNUUklOR19JVEVSQVRPUik7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUtQEBpdGVyYXRvclxuZGVmaW5lSXRlcmF0b3IoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFNUUklOR19JVEVSQVRPUixcbiAgICBzdHJpbmc6IFN0cmluZyhpdGVyYXRlZCksXG4gICAgaW5kZXg6IDBcbiAgfSk7XG4vLyBgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSVzdHJpbmdpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgdmFyIHN0cmluZyA9IHN0YXRlLnN0cmluZztcbiAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXg7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IHN0cmluZy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSBjaGFyQXQoc3RyaW5nLCBpbmRleCk7XG4gIHN0YXRlLmluZGV4ICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IGNvZGVQb2ludEF0LCBhdCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKENPTlZFUlRfVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIHBvcykge1xuICAgIHZhciBTID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICB2YXIgcG9zaXRpb24gPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgc2l6ZSA9IFMubGVuZ3RoO1xuICAgIHZhciBmaXJzdCwgc2Vjb25kO1xuICAgIGlmIChwb3NpdGlvbiA8IDAgfHwgcG9zaXRpb24gPj0gc2l6ZSkgcmV0dXJuIENPTlZFUlRfVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgZmlyc3QgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24pO1xuICAgIHJldHVybiBmaXJzdCA8IDB4RDgwMCB8fCBmaXJzdCA+IDB4REJGRiB8fCBwb3NpdGlvbiArIDEgPT09IHNpemVcbiAgICAgIHx8IChzZWNvbmQgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKSkgPCAweERDMDAgfHwgc2Vjb25kID4gMHhERkZGXG4gICAgICAgID8gQ09OVkVSVF9UT19TVFJJTkcgPyBTLmNoYXJBdChwb3NpdGlvbikgOiBmaXJzdFxuICAgICAgICA6IENPTlZFUlRfVE9fU1RSSU5HID8gUy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyAyKSA6IChmaXJzdCAtIDB4RDgwMCA8PCAxMCkgKyAoc2Vjb25kIC0gMHhEQzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmNvZGVwb2ludGF0XG4gIGNvZGVBdDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuYXRgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0XG4gIGNoYXJBdDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBET01JdGVyYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcycpO1xudmFyIEFycmF5SXRlcmF0b3JNZXRob2RzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEFycmF5SXRlcmF0b3JNZXRob2RzLnZhbHVlcztcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdO1xuICB2YXIgQ29sbGVjdGlvblByb3RvdHlwZSA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlKSB7XG4gICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdICE9PSBBcnJheVZhbHVlcykgdHJ5IHtcbiAgICAgIGhpZGUoQ29sbGVjdGlvblByb3RvdHlwZSwgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gPSBBcnJheVZhbHVlcztcbiAgICB9XG4gICAgaWYgKCFDb2xsZWN0aW9uUHJvdG90eXBlW1RPX1NUUklOR19UQUddKSBoaWRlKENvbGxlY3Rpb25Qcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIENPTExFQ1RJT05fTkFNRSk7XG4gICAgaWYgKERPTUl0ZXJhYmxlc1tDT0xMRUNUSU9OX05BTUVdKSBmb3IgKHZhciBNRVRIT0RfTkFNRSBpbiBBcnJheUl0ZXJhdG9yTWV0aG9kcykge1xuICAgICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gIT09IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSkgdHJ5IHtcbiAgICAgICAgaGlkZShDb2xsZWN0aW9uUHJvdG90eXBlLCBNRVRIT0RfTkFNRSwgQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdID0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiLy8gaXRlcmFibGUgRE9NIGNvbGxlY3Rpb25zXG4vLyBmbGFnIC0gYGl0ZXJhYmxlYCBpbnRlcmZhY2UgLSAnZW50cmllcycsICdrZXlzJywgJ3ZhbHVlcycsICdmb3JFYWNoJyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IDAsXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IDAsXG4gIENTU1ZhbHVlTGlzdDogMCxcbiAgQ2xpZW50UmVjdExpc3Q6IDAsXG4gIERPTVJlY3RMaXN0OiAwLFxuICBET01TdHJpbmdMaXN0OiAwLFxuICBET01Ub2tlbkxpc3Q6IDEsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiAwLFxuICBGaWxlTGlzdDogMCxcbiAgSFRNTEFsbENvbGxlY3Rpb246IDAsXG4gIEhUTUxDb2xsZWN0aW9uOiAwLFxuICBIVE1MRm9ybUVsZW1lbnQ6IDAsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiAwLFxuICBNZWRpYUxpc3Q6IDAsXG4gIE1pbWVUeXBlQXJyYXk6IDAsXG4gIE5hbWVkTm9kZU1hcDogMCxcbiAgTm9kZUxpc3Q6IDEsXG4gIFBhaW50UmVxdWVzdExpc3Q6IDAsXG4gIFBsdWdpbjogMCxcbiAgUGx1Z2luQXJyYXk6IDAsXG4gIFNWR0xlbmd0aExpc3Q6IDAsXG4gIFNWR051bWJlckxpc3Q6IDAsXG4gIFNWR1BhdGhTZWdMaXN0OiAwLFxuICBTVkdQb2ludExpc3Q6IDAsXG4gIFNWR1N0cmluZ0xpc3Q6IDAsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IDAsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IDAsXG4gIFN0eWxlU2hlZXRMaXN0OiAwLFxuICBUZXh0VHJhY2tDdWVMaXN0OiAwLFxuICBUZXh0VHJhY2tMaXN0OiAwLFxuICBUb3VjaExpc3Q6IDBcbn07XG4iLCJ2YXIgc3VwcG9ydCA9IHtcbiAgc2VhcmNoUGFyYW1zOiAnVVJMU2VhcmNoUGFyYW1zJyBpbiBzZWxmLFxuICBpdGVyYWJsZTogJ1N5bWJvbCcgaW4gc2VsZiAmJiAnaXRlcmF0b3InIGluIFN5bWJvbCxcbiAgYmxvYjpcbiAgICAnRmlsZVJlYWRlcicgaW4gc2VsZiAmJlxuICAgICdCbG9iJyBpbiBzZWxmICYmXG4gICAgKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3IEJsb2IoKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9KSgpLFxuICBmb3JtRGF0YTogJ0Zvcm1EYXRhJyBpbiBzZWxmLFxuICBhcnJheUJ1ZmZlcjogJ0FycmF5QnVmZmVyJyBpbiBzZWxmXG59XG5cbmZ1bmN0aW9uIGlzRGF0YVZpZXcob2JqKSB7XG4gIHJldHVybiBvYmogJiYgRGF0YVZpZXcucHJvdG90eXBlLmlzUHJvdG90eXBlT2Yob2JqKVxufVxuXG5pZiAoc3VwcG9ydC5hcnJheUJ1ZmZlcikge1xuICB2YXIgdmlld0NsYXNzZXMgPSBbXG4gICAgJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgRmxvYXQ2NEFycmF5XSdcbiAgXVxuXG4gIHZhciBpc0FycmF5QnVmZmVyVmlldyA9XG4gICAgQXJyYXlCdWZmZXIuaXNWaWV3IHx8XG4gICAgZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHZpZXdDbGFzc2VzLmluZGV4T2YoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikpID4gLTFcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU5hbWUobmFtZSkge1xuICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgbmFtZSA9IFN0cmluZyhuYW1lKVxuICB9XG4gIGlmICgvW15hLXowLTlcXC0jJCUmJyorLl5fYHx+XS9pLnRlc3QobmFtZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNoYXJhY3RlciBpbiBoZWFkZXIgZmllbGQgbmFtZScpXG4gIH1cbiAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKVxuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vLyBCdWlsZCBhIGRlc3RydWN0aXZlIGl0ZXJhdG9yIGZvciB0aGUgdmFsdWUgbGlzdFxuZnVuY3Rpb24gaXRlcmF0b3JGb3IoaXRlbXMpIHtcbiAgdmFyIGl0ZXJhdG9yID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZhbHVlID0gaXRlbXMuc2hpZnQoKVxuICAgICAgcmV0dXJuIHtkb25lOiB2YWx1ZSA9PT0gdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3JcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaXRlcmF0b3Jcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuICB0aGlzLm1hcCA9IHt9XG5cbiAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSlcbiAgICB9LCB0aGlzKVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVycykpIHtcbiAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICB0aGlzLmFwcGVuZChoZWFkZXJbMF0sIGhlYWRlclsxXSlcbiAgICB9LCB0aGlzKVxuICB9IGVsc2UgaWYgKGhlYWRlcnMpIHtcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIGhlYWRlcnNbbmFtZV0pXG4gICAgfSwgdGhpcylcbiAgfVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICB2YWx1ZSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxuICB2YXIgb2xkVmFsdWUgPSB0aGlzLm1hcFtuYW1lXVxuICB0aGlzLm1hcFtuYW1lXSA9IG9sZFZhbHVlID8gb2xkVmFsdWUgKyAnLCAnICsgdmFsdWUgOiB2YWx1ZVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG4gIGRlbGV0ZSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihuYW1lKSB7XG4gIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gIHJldHVybiB0aGlzLmhhcyhuYW1lKSA/IHRoaXMubWFwW25hbWVdIDogbnVsbFxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShub3JtYWxpemVOYW1lKG5hbWUpKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLm1hcCkge1xuICAgIGlmICh0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzLm1hcFtuYW1lXSwgbmFtZSwgdGhpcylcbiAgICB9XG4gIH1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICBpdGVtcy5wdXNoKG5hbWUpXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuSGVhZGVycy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIGl0ZW1zLnB1c2godmFsdWUpXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICBpdGVtcy5wdXNoKFtuYW1lLCB2YWx1ZV0pXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXNcbn1cblxuZnVuY3Rpb24gY29uc3VtZWQoYm9keSkge1xuICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSlcbiAgfVxuICBib2R5LmJvZHlVc2VkID0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpXG4gICAgfVxuICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QocmVhZGVyLmVycm9yKVxuICAgIH1cbiAgfSlcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYilcbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gIHJlYWRlci5yZWFkQXNUZXh0KGJsb2IpXG4gIHJldHVybiBwcm9taXNlXG59XG5cbmZ1bmN0aW9uIHJlYWRBcnJheUJ1ZmZlckFzVGV4dChidWYpIHtcbiAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYpXG4gIHZhciBjaGFycyA9IG5ldyBBcnJheSh2aWV3Lmxlbmd0aClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICBjaGFyc1tpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUodmlld1tpXSlcbiAgfVxuICByZXR1cm4gY2hhcnMuam9pbignJylcbn1cblxuZnVuY3Rpb24gYnVmZmVyQ2xvbmUoYnVmKSB7XG4gIGlmIChidWYuc2xpY2UpIHtcbiAgICByZXR1cm4gYnVmLnNsaWNlKDApXG4gIH0gZWxzZSB7XG4gICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYuYnl0ZUxlbmd0aClcbiAgICB2aWV3LnNldChuZXcgVWludDhBcnJheShidWYpKVxuICAgIHJldHVybiB2aWV3LmJ1ZmZlclxuICB9XG59XG5cbmZ1bmN0aW9uIEJvZHkoKSB7XG4gIHRoaXMuYm9keVVzZWQgPSBmYWxzZVxuXG4gIHRoaXMuX2luaXRCb2R5ID0gZnVuY3Rpb24oYm9keSkge1xuICAgIHRoaXMuX2JvZHlJbml0ID0gYm9keVxuICAgIGlmICghYm9keSkge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSAnJ1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYiAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5QmxvYiA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5LnRvU3RyaW5nKClcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgc3VwcG9ydC5ibG9iICYmIGlzRGF0YVZpZXcoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkuYnVmZmVyKVxuICAgICAgLy8gSUUgMTAtMTEgY2FuJ3QgaGFuZGxlIGEgRGF0YVZpZXcgYm9keS5cbiAgICAgIHRoaXMuX2JvZHlJbml0ID0gbmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pXG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIChBcnJheUJ1ZmZlci5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSB8fCBpc0FycmF5QnVmZmVyVmlldyhib2R5KSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChib2R5KVxuICAgIH1cblxuICAgIGlmICghdGhpcy5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpIHtcbiAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlCbG9iICYmIHRoaXMuX2JvZHlCbG9iLnR5cGUpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgdGhpcy5fYm9keUJsb2IudHlwZSlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgIHRoaXMuYmxvYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyBibG9iJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5hcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gY29uc3VtZWQodGhpcykgfHwgUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJsb2IoKS50aGVuKHJlYWRCbG9iQXNBcnJheUJ1ZmZlcilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVhZEFycmF5QnVmZmVyQXNUZXh0KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyB0ZXh0JylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5mb3JtRGF0YSkge1xuICAgIHRoaXMuZm9ybURhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKGRlY29kZSlcbiAgICB9XG4gIH1cblxuICB0aGlzLmpzb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSFRUUCBtZXRob2RzIHdob3NlIGNhcGl0YWxpemF0aW9uIHNob3VsZCBiZSBub3JtYWxpemVkXG52YXIgbWV0aG9kcyA9IFsnREVMRVRFJywgJ0dFVCcsICdIRUFEJywgJ09QVElPTlMnLCAnUE9TVCcsICdQVVQnXVxuXG5mdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG4gIHZhciB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKClcbiAgcmV0dXJuIG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xID8gdXBjYXNlZCA6IG1ldGhvZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVxdWVzdChpbnB1dCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keVxuXG4gIGlmIChpbnB1dCBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICBpZiAoaW5wdXQuYm9keVVzZWQpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpXG4gICAgfVxuICAgIHRoaXMudXJsID0gaW5wdXQudXJsXG4gICAgdGhpcy5jcmVkZW50aWFscyA9IGlucHV0LmNyZWRlbnRpYWxzXG4gICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKGlucHV0LmhlYWRlcnMpXG4gICAgfVxuICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kXG4gICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZVxuICAgIHRoaXMuc2lnbmFsID0gaW5wdXQuc2lnbmFsXG4gICAgaWYgKCFib2R5ICYmIGlucHV0Ll9ib2R5SW5pdCAhPSBudWxsKSB7XG4gICAgICBib2R5ID0gaW5wdXQuX2JvZHlJbml0XG4gICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWVcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy51cmwgPSBTdHJpbmcoaW5wdXQpXG4gIH1cblxuICB0aGlzLmNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscyB8fCB0aGlzLmNyZWRlbnRpYWxzIHx8ICdzYW1lLW9yaWdpbidcbiAgaWYgKG9wdGlvbnMuaGVhZGVycyB8fCAhdGhpcy5oZWFkZXJzKSB7XG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICB9XG4gIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8IHRoaXMubWV0aG9kIHx8ICdHRVQnKVxuICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGxcbiAgdGhpcy5zaWduYWwgPSBvcHRpb25zLnNpZ25hbCB8fCB0aGlzLnNpZ25hbFxuICB0aGlzLnJlZmVycmVyID0gbnVsbFxuXG4gIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb2R5IG5vdCBhbGxvd2VkIGZvciBHRVQgb3IgSEVBRCByZXF1ZXN0cycpXG4gIH1cbiAgdGhpcy5faW5pdEJvZHkoYm9keSlcbn1cblxuUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMsIHtib2R5OiB0aGlzLl9ib2R5SW5pdH0pXG59XG5cbmZ1bmN0aW9uIGRlY29kZShib2R5KSB7XG4gIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKClcbiAgYm9keVxuICAgIC50cmltKClcbiAgICAuc3BsaXQoJyYnKVxuICAgIC5mb3JFYWNoKGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICBpZiAoYnl0ZXMpIHtcbiAgICAgICAgdmFyIHNwbGl0ID0gYnl0ZXMuc3BsaXQoJz0nKVxuICAgICAgICB2YXIgbmFtZSA9IHNwbGl0LnNoaWZ0KCkucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignPScpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIGZvcm0uYXBwZW5kKGRlY29kZVVSSUNvbXBvbmVudChuYW1lKSwgZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSlcbiAgICAgIH1cbiAgICB9KVxuICByZXR1cm4gZm9ybVxufVxuXG5mdW5jdGlvbiBwYXJzZUhlYWRlcnMocmF3SGVhZGVycykge1xuICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKClcbiAgLy8gUmVwbGFjZSBpbnN0YW5jZXMgb2YgXFxyXFxuIGFuZCBcXG4gZm9sbG93ZWQgYnkgYXQgbGVhc3Qgb25lIHNwYWNlIG9yIGhvcml6b250YWwgdGFiIHdpdGggYSBzcGFjZVxuICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzIzMCNzZWN0aW9uLTMuMlxuICB2YXIgcHJlUHJvY2Vzc2VkSGVhZGVycyA9IHJhd0hlYWRlcnMucmVwbGFjZSgvXFxyP1xcbltcXHQgXSsvZywgJyAnKVxuICBwcmVQcm9jZXNzZWRIZWFkZXJzLnNwbGl0KC9cXHI/XFxuLykuZm9yRWFjaChmdW5jdGlvbihsaW5lKSB7XG4gICAgdmFyIHBhcnRzID0gbGluZS5zcGxpdCgnOicpXG4gICAgdmFyIGtleSA9IHBhcnRzLnNoaWZ0KCkudHJpbSgpXG4gICAgaWYgKGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gcGFydHMuam9pbignOicpLnRyaW0oKVxuICAgICAgaGVhZGVycy5hcHBlbmQoa2V5LCB2YWx1ZSlcbiAgICB9XG4gIH0pXG4gIHJldHVybiBoZWFkZXJzXG59XG5cbkJvZHkuY2FsbChSZXF1ZXN0LnByb3RvdHlwZSlcblxuZXhwb3J0IGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fVxuICB9XG5cbiAgdGhpcy50eXBlID0gJ2RlZmF1bHQnXG4gIHRoaXMuc3RhdHVzID0gb3B0aW9ucy5zdGF0dXMgPT09IHVuZGVmaW5lZCA/IDIwMCA6IG9wdGlvbnMuc3RhdHVzXG4gIHRoaXMub2sgPSB0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDBcbiAgdGhpcy5zdGF0dXNUZXh0ID0gJ3N0YXR1c1RleHQnIGluIG9wdGlvbnMgPyBvcHRpb25zLnN0YXR1c1RleHQgOiAnT0snXG4gIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJ1xuICB0aGlzLl9pbml0Qm9keShib2R5SW5pdClcbn1cblxuQm9keS5jYWxsKFJlc3BvbnNlLnByb3RvdHlwZSlcblxuUmVzcG9uc2UucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgUmVzcG9uc2UodGhpcy5fYm9keUluaXQsIHtcbiAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgIHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dCxcbiAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh0aGlzLmhlYWRlcnMpLFxuICAgIHVybDogdGhpcy51cmxcbiAgfSlcbn1cblxuUmVzcG9uc2UuZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IDAsIHN0YXR1c1RleHQ6ICcnfSlcbiAgcmVzcG9uc2UudHlwZSA9ICdlcnJvcidcbiAgcmV0dXJuIHJlc3BvbnNlXG59XG5cbnZhciByZWRpcmVjdFN0YXR1c2VzID0gWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XVxuXG5SZXNwb25zZS5yZWRpcmVjdCA9IGZ1bmN0aW9uKHVybCwgc3RhdHVzKSB7XG4gIGlmIChyZWRpcmVjdFN0YXR1c2VzLmluZGV4T2Yoc3RhdHVzKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCBzdGF0dXMgY29kZScpXG4gIH1cblxuICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IHN0YXR1cywgaGVhZGVyczoge2xvY2F0aW9uOiB1cmx9fSlcbn1cblxuZXhwb3J0IHZhciBET01FeGNlcHRpb24gPSBzZWxmLkRPTUV4Y2VwdGlvblxudHJ5IHtcbiAgbmV3IERPTUV4Y2VwdGlvbigpXG59IGNhdGNoIChlcnIpIHtcbiAgRE9NRXhjZXB0aW9uID0gZnVuY3Rpb24obWVzc2FnZSwgbmFtZSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2VcbiAgICB0aGlzLm5hbWUgPSBuYW1lXG4gICAgdmFyIGVycm9yID0gRXJyb3IobWVzc2FnZSlcbiAgICB0aGlzLnN0YWNrID0gZXJyb3Iuc3RhY2tcbiAgfVxuICBET01FeGNlcHRpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpXG4gIERPTUV4Y2VwdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBET01FeGNlcHRpb25cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZldGNoKGlucHV0LCBpbml0KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KGlucHV0LCBpbml0KVxuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsICYmIHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybiByZWplY3QobmV3IERPTUV4Y2VwdGlvbignQWJvcnRlZCcsICdBYm9ydEVycm9yJykpXG4gICAgfVxuXG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXG5cbiAgICBmdW5jdGlvbiBhYm9ydFhocigpIHtcbiAgICAgIHhoci5hYm9ydCgpXG4gICAgfVxuXG4gICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIHN0YXR1czogeGhyLnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHBhcnNlSGVhZGVycyh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgfHwgJycpXG4gICAgICB9XG4gICAgICBvcHRpb25zLnVybCA9ICdyZXNwb25zZVVSTCcgaW4geGhyID8geGhyLnJlc3BvbnNlVVJMIDogb3B0aW9ucy5oZWFkZXJzLmdldCgnWC1SZXF1ZXN0LVVSTCcpXG4gICAgICB2YXIgYm9keSA9ICdyZXNwb25zZScgaW4geGhyID8geGhyLnJlc3BvbnNlIDogeGhyLnJlc3BvbnNlVGV4dFxuICAgICAgcmVzb2x2ZShuZXcgUmVzcG9uc2UoYm9keSwgb3B0aW9ucykpXG4gICAgfVxuXG4gICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgfVxuXG4gICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICB9XG5cbiAgICB4aHIub25hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVqZWN0KG5ldyBET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKVxuICAgIH1cblxuICAgIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnVybCwgdHJ1ZSlcblxuICAgIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlXG4gICAgfSBlbHNlIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnb21pdCcpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSBmYWxzZVxuICAgIH1cblxuICAgIGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIgJiYgc3VwcG9ydC5ibG9iKSB7XG4gICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2Jsb2InXG4gICAgfVxuXG4gICAgcmVxdWVzdC5oZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKVxuICAgIH0pXG5cbiAgICBpZiAocmVxdWVzdC5zaWduYWwpIHtcbiAgICAgIHJlcXVlc3Quc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRYaHIpXG5cbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gRE9ORSAoc3VjY2VzcyBvciBmYWlsdXJlKVxuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICByZXF1ZXN0LnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0WGhyKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgeGhyLnNlbmQodHlwZW9mIHJlcXVlc3QuX2JvZHlJbml0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiByZXF1ZXN0Ll9ib2R5SW5pdClcbiAgfSlcbn1cblxuZmV0Y2gucG9seWZpbGwgPSB0cnVlXG5cbmlmICghc2VsZi5mZXRjaCkge1xuICBzZWxmLmZldGNoID0gZmV0Y2hcbiAgc2VsZi5IZWFkZXJzID0gSGVhZGVyc1xuICBzZWxmLlJlcXVlc3QgPSBSZXF1ZXN0XG4gIHNlbGYuUmVzcG9uc2UgPSBSZXNwb25zZVxufVxuIiwiaW1wb3J0IHsgZ2V0RGF0YUZyb21TZXJ2ZXIgfSBmcm9tIFwiLi9qcy1tb2R1bGVzL2dldC1kYXRhXCJcbmltcG9ydCB7IGNyZWF0ZVNhbXBsZXMgfSBmcm9tIFwiLi9qcy1tb2R1bGVzL3NhbXBsZVwiXG5pbXBvcnQgJ3doYXR3Zy1mZXRjaCdcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgICBjb25zdCByZWdleHAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcmVnZXhwJyk7XG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZGVzY3JpcHRpb24nKTtcbiAgICBnZXREYXRhRnJvbVNlcnZlcignL2FwaS90YXNrcz9pZD0xJywgKGRiKSA9PiB7XG4gICAgICAgIHJlZ2V4cC52YWx1ZSA9IGRiLnJlZ2V4cDtcbiAgICAgICAgZGVzY3JpcHRpb24udmFsdWUgPSBkYi5kZXNjcmlwdGlvbjtcbiAgICAgICAgY3JlYXRlU2FtcGxlcyhkYi5zYW1wbGVzKTtcbiAgICB9KTtcbn0pOyIsImV4cG9ydCBmdW5jdGlvbiBnZXREYXRhRnJvbVNlcnZlcih1cmwsIHJlbmRlckNhbGxiYWNrKSB7XG4gICAgZmV0Y2godXJsKVxuICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgaWYocmVzcG9uc2Uub2spIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FuYHQgZmluZCBmaWxlJyk7XG4gICAgfSlcbiAgICAudGhlbihkYiA9PiB7XG4gICAgICAgIHJlbmRlckNhbGxiYWNrKGRiKTtcbiAgICB9KVxuICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVyci5tZXNzYWdlKTtcbiAgICB9KTtcbn0iLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlU2FtcGxlcyhzYW1wbGVzID0gW10pIHtcbiAgICBjb25zdCBzYW1wbGVzRWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zYW1wbGVzJyk7XG4gICAgbGV0IHNhbXBsZXNUZXh0ID0gJyc7XG4gICAgZm9yIChjb25zdCBzYW1wbGUgb2Ygc2FtcGxlcykge1xuICAgICAgICBzYW1wbGVzVGV4dCArPSBgPGRpdiBjbGFzcz1cInNhbXBsZVwiPlxuICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwiaW5wdXRcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiU2FtcGxlXCIgdmFsdWU9JHtzYW1wbGV9PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFuc3dlciBuby1tYXRjaFwiPjxzcGFuPkRvbid0IG1hdGNoPC9zcGFuPjwvZGl2PlxuICAgICAgICA8L2Rpdj5gXG4gICAgfVxuICAgIHNhbXBsZXNFbGVtLmlubmVySFRNTCA9IHNhbXBsZXNUZXh0O1xufSAiXSwic291cmNlUm9vdCI6IiJ9